security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # Define your user provider to load users from the database
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email # The property used to lookup the user (usually email or username)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider # Use the entity provider we defined above

            # Configure form login
            form_login:
                # "app_login" is the name of the route created previously
                login_path: login # Route name for the login page
                check_path: login # Route name Symfony listens on for form submission
                default_target_path: app_home # Route name to redirect to after successful login
                # You might want to enable this for a better UX
                # always_use_default_target_path: true

            logout:
                path: app_logout # Route name for the logout action
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # Add access control rules here, e.g.:
        # - { path: ^/dashboard, roles: ROLE_USER } # Example: require login for /dashboard

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
