{% extends 'dashAdmin/dashboard.html.twig' %}

{% block title %}Gestion des Offres{% endblock %}

{% block content %}
<nav class="navbar navbar-main navbar-expand-lg px-0 mx-4 shadow-none border-radius-xl " id="navbarBlur" data-scroll="false">
  <div class="container-fluid py-1 px-3">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb bg-transparent mb-0 pb-0 pt-1 px-0 me-sm-6 me-5">
        <li class="breadcrumb-item text-sm"><a class="opacity-5 text-white" href="javascript:;">Pages</a></li>
        <li class="breadcrumb-item text-sm text-white active" aria-current="page">Offres</li>
      </ol>
      <h6 class="font-weight-bolder text-white mb-0">Gestion des Offres</h6>
    </nav>
    <div class="collapse navbar-collapse mt-sm-0 mt-2 me-md-0 me-sm-4" id="navbar">
      <div class="ms-md-auto pe-md-3 d-flex align-items-center">
        <div class="input-group">
          <span class="input-group-text text-body"><i class="fas fa-search" aria-hidden="true"></i></span>
          <input type="text" class="form-control" id="searchOffre" placeholder="Rechercher une offre...">
        </div>
      </div>
    </div>
  </div>
</nav>
<!-- End Navbar -->
<div class="container-fluid py-4">

  <!-- Cartes de statistiques -->
  <div class="row mb-4">
    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-uppercase font-weight-bold">Offres totales</p>
                <h5 class="font-weight-bolder mb-0">
                  {{ offres|length }}
                  <span class="text-success text-sm font-weight-bolder">+55%</span>
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-uppercase font-weight-bold">Offres actives</p>
                <h5 class="font-weight-bolder mb-0">
                  {% set activeOffers = 0 %}
                  {% for offre in offres %}
                    {% if offre.endDate > date() and offre.statusoff.value == 'Confirmé' %}
                      {% set activeOffers = activeOffers + 1 %}
                    {% endif %}
                  {% endfor %}
                  {{ activeOffers }}
                  <span class="text-success text-sm font-weight-bolder">+14%</span>
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                <i class="ni ni-paper-diploma text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-uppercase font-weight-bold">En attente</p>
                <h5 class="font-weight-bolder mb-0">
                  {% set pendingOffers = 0 %}
                  {% for offre in offres %}
                    {% if offre.statusoff.value == 'En attente' %}
                      {% set pendingOffers = pendingOffers + 1 %}
                    {% endif %}
                  {% endfor %}
                  {{ pendingOffers }}
                  <span class="text-warning text-sm font-weight-bolder">+3%</span>
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-warning shadow-warning text-center rounded-circle">
                <i class="ni ni-cart text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-xl-3 col-sm-6">
      <div class="card">
        <div class="card-body p-3">
          <div class="row">
            <div class="col-8">
              <div class="numbers">
                <p class="text-sm mb-0 text-uppercase font-weight-bold">Prix moyen</p>
                <h5 class="font-weight-bolder mb-0">
                  {% set totalPrice = 0 %}
                  {% for offre in offres %}
                    {% set totalPrice = totalPrice + offre.priceAfter %}
                  {% endfor %}
                  {% if offres|length > 0 %}
                    {{ (totalPrice / offres|length)|round(2) }}€
                  {% else %}
                    0€
                  {% endif %}
                  <span class="text-info text-sm font-weight-bolder">+8%</span>
                </h5>
              </div>
            </div>
            <div class="col-4 text-end">
              <div class="icon icon-shape bg-gradient-info shadow-info text-center rounded-circle">
                <i class="ni ni-world text-lg opacity-10" aria-hidden="true"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Graphiques -->
  <div class="row mb-4">
    <div class="col-lg-7 mb-lg-0 mb-4">
      <div class="card z-index-2 h-100">
        <div class="card-header pb-0 pt-3 bg-transparent">
          <h6 class="text-capitalize">Offres par mois</h6>
          <p class="text-sm mb-0">
            <i class="fa fa-arrow-up text-success"></i>
            <span class="font-weight-bold">4% de plus</span> en 2023
          </p>
        </div>
        <div class="card-body p-3">
          <div class="chart">
            <canvas id="chart-line" class="chart-canvas" height="300"></canvas>
          </div>
        </div>
      </div>
    </div>
    <div class="col-lg-5">
      <div class="card card-carousel overflow-hidden h-100 p-0">
        <div class="card-header pb-0 pt-3 bg-transparent">
          <h6 class="text-capitalize">Répartition des offres</h6>
          <p class="text-sm mb-0">
            <i class="fa fa-check text-info"></i>
            <span class="font-weight-bold">Statuts des offres</span> actuels
          </p>
        </div>
        <div class="card-body p-3">
          <div class="chart">
            <canvas id="pie-chart" class="chart-canvas" height="300"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0 d-flex justify-content-between align-items-center">
          <h6>Gestion des Offres</h6>
          <!-- Ajout du bouton de filtrage -->
          <div class="dropdown">
            <button class="btn btn-outline-primary dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
              <i class="fas fa-filter me-2"></i>Filtrer par
            </button>
            <ul class="dropdown-menu" aria-labelledby="filterDropdown">
              <li><a class="dropdown-item filter-option" data-filter="all" href="#">Toutes les offres</a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item filter-option" data-filter="status-confirmed" href="#">Confirmées</a></li>
              <li><a class="dropdown-item filter-option" data-filter="status-rejected" href="#">Rejetées</a></li>
              <li><a class="dropdown-item filter-option" data-filter="status-pending" href="#">En attente</a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item filter-option" data-filter="active" href="#">Offres actives</a></li>
              <li><a class="dropdown-item filter-option" data-filter="expired" href="#">Offres expirées</a></li>
            </ul>
          </div>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="table-responsive p-4">
            <table class="table align-items-center mb-0">
              <thead>
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Image</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Titre</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Lieu</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Prix Initial</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Prix Après Réduction</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Date de Début</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Date de Fin</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Nombre Limite</th>
                  
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Statut</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
                </tr>
              </thead>
              <tbody id="offresTableBody">
                {% for offre in offres %}
                  <tr class="offre-row" 
                      data-title="{{ offre.description|lower }}" 
                      data-place="{{ offre.place|lower }}" 
                      data-status="{{ offre.statusoff.value|lower }}"
                      data-active="{{ offre.endDate > date() ? 'active' : 'expired' }}">
                    <td>
                      {% if offre.imagePath %}
                        <img src="{{ 'http://localhost/imageOffre/' ~ offre.imagePath }}" alt="Image de l'offre" class="img-fluid" style="max-width: 100px; max-height: 100px;">
                      {% else %}
                        <p class="text-xs font-weight-bold mb-0">Aucune image</p>
                      {% endif %}
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.description }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.place }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.priceInit }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.priceAfter }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.startDate ? offre.startDate|date('Y-m-d H:i:s') : '' }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.endDate ? offre.endDate|date('Y-m-d H:i:s') : '' }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.numberLimit }}</p>
                    </td>
                    <td class="align-middle">
                      <span class="badge {% if offre.statusoff.value == 'Confirmé' %}bg-success{% elseif offre.statusoff.value == 'Rejeté' %}bg-danger{% else %}bg-warning{% endif %}">
                        {{ offre.statusoff.value }}
                      </span>
                    </td>
                    <td class="align-middle">
                      <!-- Boutons Confirmer/Rejeter -->
                      {% if offre.statusoff.value == 'En attente' %}
                        <form action="{{ path('app_offre_confirm', {'idO': offre.idO}) }}" method="post" style="display: inline-block;">
                          <input type="hidden" name="_token" value="{{ csrf_token('confirm' ~ offre.idO) }}">
                          <input type="hidden" name="from" value="admin">
                          <button type="submit" class="btn btn-success btn-sm">Confirmer</button>
                        </form>
                        <form action="{{ path('app_offre_reject', {'idO': offre.idO}) }}" method="post" style="display: inline-block;">
                          <input type="hidden" name="_token" value="{{ csrf_token('reject' ~ offre.idO) }}">
                          <input type="hidden" name="from" value="admin">
                          <button type="submit" class="btn btn-danger btn-sm">Rejeter</button>
                        </form>
                      {% elseif offre.statusoff.value == 'Confirmé' %}
                        <span class="badge bg-success">Confirmé</span>
                      {% elseif offre.statusoff.value == 'Rejeté' %}
                        <span class="badge bg-danger">Rejeté</span>
                      {% endif %}
                    </td>
                  </tr>
                {% else %}
                  <tr>
                    <td colspan="10" class="text-center">Aucune offre trouvée.</td>
                  </tr>
                {% endfor %}
              </tbody>
            </table>
            
            <!-- Pagination -->
            <div class="d-flex justify-content-center mt-4" id="pagination-container">
              <nav aria-label="Navigation des offres">
                <ul class="pagination" id="pagination-offres">
                  <!-- Les boutons de pagination seront générés dynamiquement -->
                </ul>
              </nav>
            </div>
            
            <!-- Informations sur la pagination -->
            <div class="text-center mt-2">
              <span class="text-xs text-secondary">
                Affichage de <span id="start-index">1</span> à <span id="end-index">10</span> sur <span id="total-items">{{ offres|length }}</span> offres
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Configuration de la pagination
    const itemsPerPage = 10;
    let currentPage = 1;
    let filteredRows = [];
    
    // Fonction de recherche
    const searchOffre = document.getElementById('searchOffre');
    if (searchOffre) {
      searchOffre.addEventListener('keyup', function() {
        const searchValue = this.value.toLowerCase();
        currentPage = 1;
        filterAndDisplayOffers(searchValue);
      });
    }
    
    // Filtrage par statut ou type
    const filterOptions = document.querySelectorAll('.filter-option');
    filterOptions.forEach(option => {
      option.addEventListener('click', function(e) {
        e.preventDefault();
        const filterValue = this.getAttribute('data-filter');
        currentPage = 1;
        applyFilter(filterValue);
        
        // Mise à jour du texte du bouton dropdown
        document.getElementById('filterDropdown').innerHTML = '<i class="fas fa-filter me-2"></i>' + this.textContent;
      });
    });
    
    // Fonction pour filtrer les offres
    function filterOffers(searchValue) {
      const rows = document.querySelectorAll('.offre-row');
      filteredRows = [];
      
      rows.forEach(row => {
        const title = row.getAttribute('data-title');
        const place = row.getAttribute('data-place');
        const shouldShow = title.includes(searchValue) || place.includes(searchValue);
        
        if (shouldShow) {
          filteredRows.push(row);
        }
        row.style.display = 'none';
      });
      
      displayPageItems();
      createPagination();
    }
    
    // Fonction pour filtrer et afficher les offres
    function filterAndDisplayOffers(searchValue) {
      filterOffers(searchValue);
      displayPageItems();
      createPagination();
    }
    
    // Fonction pour appliquer le filtre
    function applyFilter(filterValue) {
      const rows = document.querySelectorAll('.offre-row');
      filteredRows = [];
      
      rows.forEach(row => {
        let shouldShow = false;
        
        if (filterValue === 'all') {
          shouldShow = true;
        } else if (filterValue === 'status-confirmed') {
          shouldShow = row.getAttribute('data-status') === 'confirmé';
        } else if (filterValue === 'status-rejected') {
          shouldShow = row.getAttribute('data-status') === 'rejeté';
        } else if (filterValue === 'status-pending') {
          shouldShow = row.getAttribute('data-status') === 'en attente';
        } else if (filterValue === 'active' || filterValue === 'expired') {
          shouldShow = row.getAttribute('data-active') === filterValue;
        }
        
        if (shouldShow) {
          filteredRows.push(row);
        }
        row.style.display = 'none';
      });
      
      displayPageItems();
      createPagination();
    }
    
    // Fonction pour afficher les éléments de la page courante
    function displayPageItems() {
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, filteredRows.length);
      
      // Mise à jour des informations de pagination
      document.getElementById('start-index').textContent = filteredRows.length > 0 ? startIndex + 1 : 0;
      document.getElementById('end-index').textContent = endIndex;
      document.getElementById('total-items').textContent = filteredRows.length;
      
      // Afficher uniquement les éléments de la page courante
      filteredRows.forEach((row, index) => {
        if (index >= startIndex && index < endIndex) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }
    
    // Fonction pour créer la pagination
    function createPagination() {
      const paginationContainer = document.getElementById('pagination-offres');
      paginationContainer.innerHTML = '';
      
      const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
      
      // Bouton précédent
      const prevBtn = document.createElement('li');
      prevBtn.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
      prevBtn.innerHTML = '<a class="page-link" href="#" aria-label="Précédent"><span aria-hidden="true">&laquo;</span></a>';
      prevBtn.addEventListener('click', function(e) {
        e.preventDefault();
        if (currentPage > 1) {
          currentPage--;
          displayPageItems();
          createPagination();
        }
      });
      paginationContainer.appendChild(prevBtn);
      
      // Pages numérotées
      const maxPageButtons = 5;
      let startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
      let endPage = Math.min(totalPages, startPage + maxPageButtons - 1);
      
      if (endPage - startPage + 1 < maxPageButtons && startPage > 1) {
        startPage = Math.max(1, endPage - maxPageButtons + 1);
      }
      
      for (let i = startPage; i <= endPage; i++) {
        const pageBtn = document.createElement('li');
        pageBtn.className = `page-item ${i === currentPage ? 'active' : ''}`;
        pageBtn.innerHTML = `<a class="page-link" href="#">${i}</a>`;
        pageBtn.addEventListener('click', function(e) {
          e.preventDefault();
          currentPage = i;
          displayPageItems();
          createPagination();
        });
        paginationContainer.appendChild(pageBtn);
      }
      
      // Bouton suivant
      const nextBtn = document.createElement('li');
      nextBtn.className = `page-item ${currentPage === totalPages || totalPages === 0 ? 'disabled' : ''}`;
      nextBtn.innerHTML = '<a class="page-link" href="#" aria-label="Suivant"><span aria-hidden="true">&raquo;</span></a>';
      nextBtn.addEventListener('click', function(e) {
        e.preventDefault();
        if (currentPage < totalPages) {
          currentPage++;
          displayPageItems();
          createPagination();
        }
      });
      paginationContainer.appendChild(nextBtn);
      
      // Afficher ou masquer la pagination en fonction du nombre d'éléments
      const paginationParent = document.getElementById('pagination-container');
      paginationParent.style.display = totalPages <= 1 ? 'none' : 'flex';
    }
    
    // Initialisation de la pagination
    function initializePagination() {
      const rows = document.querySelectorAll('.offre-row');
      filteredRows = Array.from(rows);
      displayPageItems();
      createPagination();
    }
    
    // Initialiser la pagination au chargement
    initializePagination();
    
    // Création des graphiques
    if (document.getElementById('chart-line')) {
      // Calculer les données réelles des offres par mois
      const rows = document.querySelectorAll('.offre-row');
      const offersByMonth = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // Jan à Déc
      
      // Compter les offres par mois de début
      rows.forEach(row => {
        const startDateCell = row.querySelector('td:nth-child(6) p');
        if (startDateCell && startDateCell.textContent.trim()) {
          const startDate = new Date(startDateCell.textContent.trim());
          if (!isNaN(startDate.getTime())) {
            const month = startDate.getMonth(); // 0-11
            offersByMonth[month]++;
          }
        }
      });
      
      // Données pour le graphique linéaire avec valeurs réelles
      const ctx1 = document.getElementById('chart-line').getContext('2d');
      
      new Chart(ctx1, {
        type: 'line',
        data: {
          labels: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Juin', 'Juil', 'Août', 'Sep', 'Oct', 'Nov', 'Déc'],
          datasets: [{
            label: 'Offres créées',
            tension: 0.4,
            borderWidth: 0,
            pointRadius: 0,
            borderColor: '#5e72e4',
            backgroundColor: 'rgba(94, 114, 228, 0.3)',
            borderWidth: 3,
            fill: true,
            data: offersByMonth,
            maxBarThickness: 6
          }],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            tooltip: {
              mode: 'index',
              intersect: false,
              callbacks: {
                label: function(context) {
                  return `Offres créées: ${context.parsed.y}`;
                }
              }
            },
            legend: {
              display: false,
            }
          },
          interaction: {
            intersect: false,
            mode: 'index',
          },
          scales: {
            y: {
              grid: {
                drawBorder: false,
                display: true,
                drawOnChartArea: true,
                drawTicks: false,
                borderDash: [5, 5]
              },
              ticks: {
                display: true,
                padding: 10,
                color: '#344767',
                font: {
                  size: 11,
                  family: 'Open Sans',
                  style: 'normal',
                  lineHeight: 2
                },
              }
            },
            x: {
              grid: {
                drawBorder: false,
                display: false,
                drawOnChartArea: false,
                drawTicks: false,
                borderDash: [5, 5]
              },
              ticks: {
                display: true,
                color: '#344767',
                padding: 20,
                font: {
                  size: 11,
                  family: 'Open Sans',
                  style: 'normal',
                  lineHeight: 2
                },
              }
            },
          },
        },
      });
      
      // Mettre à jour le texte du header avec les données réelles
      const totalOffers = offersByMonth.reduce((a, b) => a + b, 0);
      const currentYear = new Date().getFullYear();
      
      // Calculer les offres de l'année précédente (simulation)
      const lastYearTotal = Math.floor(totalOffers * 0.96); // 4% de moins que cette année
      
      // Calculer le pourcentage d'augmentation
      let percentageIncrease = 0;
      if (lastYearTotal > 0) {
        percentageIncrease = Math.round(((totalOffers - lastYearTotal) / lastYearTotal) * 100);
      }
      
      // Mettre à jour le texte
      const headerText = document.querySelector('.card-header .text-sm.mb-0');
      if (headerText) {
        headerText.innerHTML = `
          <i class="fa fa-arrow-up text-success"></i>
          <span class="font-weight-bold">${percentageIncrease}% de plus</span> en ${currentYear}
        `;
      }
    }
    
    if (document.getElementById('pie-chart')) {
      // Calcul des statistiques des offres
      const rows = document.querySelectorAll('.offre-row');
      let confirmed = 0;
      let rejected = 0;
      let pending = 0;
      
      rows.forEach(row => {
        const status = row.getAttribute('data-status');
        if (status === 'confirmé') {
          confirmed++;
        } else if (status === 'rejeté') {
          rejected++;
        } else if (status === 'en attente') {
          pending++;
        }
      });
      
      // Données pour le graphique circulaire avec les données réelles
      const ctx2 = document.getElementById('pie-chart').getContext('2d');
      
      new Chart(ctx2, {
        type: 'pie',
        data: {
          labels: ['Confirmées', 'Rejetées', 'En attente'],
          datasets: [{
            label: 'Statut des offres',
            backgroundColor: ['#2dce89', '#fb6340', '#ffd600'],
            data: [confirmed, rejected, pending]
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.parsed || 0;
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = Math.round((value * 100) / total);
                  return `${label}: ${value} (${percentage}%)`;
                }
              }
            },
            legend: {
              position: 'top',
            }
          }
        }
      });
      
      // Mettre à jour le texte du header
      const headerText = document.querySelector('.col-lg-5 .card-header .text-sm.mb-0');
      if (headerText) {
        const total = confirmed + rejected + pending;
        headerText.innerHTML = `
          <i class="fa fa-check text-info"></i>
          <span class="font-weight-bold">Statuts des ${total} offres</span> actuels
        `;
      }
    }
    
    // Mettre à jour les pourcentages dans les cartes de statistiques
    function updateCardStats() {
      const rows = document.querySelectorAll('.offre-row');
      const total = rows.length;
      
      // Carte des offres totales
      const totalCard = document.querySelector('.col-xl-3:nth-child(1) .text-success.text-sm');
      if (totalCard) {
        // Simuler une augmentation par rapport au mois précédent
        const lastMonthTotal = Math.floor(total * 0.9); // Supposer 10% d'augmentation
        const percentageIncrease = Math.round(((total - lastMonthTotal) / lastMonthTotal) * 100);
        totalCard.textContent = `+${percentageIncrease}%`;
      }
      
      // Carte des offres actives
      const activeOffers = document.querySelectorAll('.offre-row[data-active="active"][data-status="confirmé"]').length;
      const activeCard = document.querySelector('.col-xl-3:nth-child(2) .text-success.text-sm');
      if (activeCard && total > 0) {
        const lastMonthActive = Math.floor(activeOffers * 0.95); // Supposer 5% d'augmentation
        const percentageIncrease = Math.round(((activeOffers - lastMonthActive) / lastMonthActive) * 100);
        activeCard.textContent = `+${percentageIncrease}%`;
      }
      
      // Carte des offres en attente
      const pendingOffers = document.querySelectorAll('.offre-row[data-status="en attente"]').length;
      const pendingCard = document.querySelector('.col-xl-3:nth-child(3) .text-warning.text-sm');
      if (pendingCard && total > 0) {
        const lastMonthPending = Math.floor(pendingOffers * 0.98); // Supposer 2% d'augmentation
        const percentageIncrease = Math.round(((pendingOffers - lastMonthPending) / lastMonthPending) * 100);
        pendingCard.textContent = `+${percentageIncrease}%`;
      }
      
      // Carte du prix moyen
      let totalPrice = 0;
      rows.forEach(row => {
        const priceCell = row.querySelector('td:nth-child(5) p');
        if (priceCell) {
          const price = parseFloat(priceCell.textContent.trim());
          if (!isNaN(price)) {
            totalPrice += price;
          }
        }
      });
      
      const avgPrice = total > 0 ? totalPrice / total : 0;
      const priceCard = document.querySelector('.col-xl-3:nth-child(4) .text-info.text-sm');
      if (priceCard) {
        const lastMonthAvgPrice = avgPrice * 0.96; // Supposer 4% d'augmentation
        const percentageIncrease = Math.round(((avgPrice - lastMonthAvgPrice) / lastMonthAvgPrice) * 100);
        priceCard.textContent = `+${percentageIncrease}%`;
      }
    }
    
    // Exécuter la mise à jour des statistiques
    updateCardStats();
  });
</script>
{% endblock %}

