{% extends 'dashAdmin/dashboard.html.twig' %}

{% block title %}Station Management{% endblock %}

{% block content %}
<nav class="navbar navbar-main navbar-expand-lg px-0 mx-4 shadow-none border-radius-xl " id="navbarBlur" data-scroll="false">
  <div class="container-fluid py-1 px-3">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb bg-transparent mb-0 pb-0 pt-1 px-0 me-sm-6 me-5">
        <li class="breadcrumb-item text-sm"><a class="opacity-5 text-white" href="javascript:;">Pages</a></li>
        <li class="breadcrumb-item text-sm text-white active" aria-current="page">Stations</li>
      </ol>
      <h6 class="font-weight-bolder text-white mb-0">Stations en attente d'approbation</h6>
    </nav>
    <div class="collapse navbar-collapse mt-sm-0 mt-2 me-md-0 me-sm-4" id="navbar">
      <div class="ms-md-auto pe-md-3 d-flex align-items-center">
        <div class="input-group">
          <span class="input-group-text text-body"><i class="fas fa-search" aria-hidden="true"></i></span>
          <input type="text" class="form-control" id="searchInput" placeholder="Rechercher une station...">
        </div>
      </div>
    </div>
  </div>
</nav>
<!-- End Navbar -->
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0">
          <h6>Stations en attente d'approbation</h6>
        </div>
        <div class="card-body px-0 pt-0 pb-2">
          <div class="table-responsive p-0">
            <table class="table align-items-center mb-0" id="stationsTable">
              <thead>
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Station</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Propriétaire</th>
                  <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Capacité</th>
                  <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Type de Vélo</th>
                  <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Prix/Heure</th>
                  <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Pays</th>
                  <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
                </tr>
              </thead>
              <tbody>
                {% if stations is empty %}
                  <tr>
                    <td colspan="7" class="text-center py-4">
                      <p class="text-sm mb-0">Aucune station en attente d'approbation</p>
                    </td>
                  </tr>
                {% else %}
                  {% for station in stations %}
                    <tr data-station-id="{{ station.idS }}">
                      <td>
                        <div class="d-flex px-2 py-1">
                          <div class="d-flex flex-column justify-content-center">
                            <h6 class="mb-0 text-sm">{{ station.nom }}</h6>
                            <p class="text-xs text-secondary mb-0">
                              Lat: {{ station.latitude }}, Long: {{ station.longitude }}
                            </p>
                          </div>
                        </div>
                      </td>
                      <td>
                        <p class="text-xs font-weight-bold mb-0">{{ station.user.name }} {{ station.user.prenom }}</p>
                        <p class="text-xs text-secondary mb-0">{{ station.user.email }}</p>
                      </td>
                      <td class="align-middle text-center">
                        <span class="text-secondary text-xs font-weight-bold">{{ station.capacite }}</span>
                      </td>
                      <td class="align-middle text-center">
                        <span class="text-secondary text-xs font-weight-bold">{{ station.typeVelo }}</span>
                      </td>
                      <td class="align-middle text-center">
                        <span class="text-secondary text-xs font-weight-bold">{{ station.prixHeure }}€</span>
                      </td>
                      <td class="align-middle text-center">
                        <span class="text-secondary text-xs font-weight-bold">{{ station.pays }}</span>
                      </td>
                      <td class="align-middle text-center">
                        <button onclick="approveStation({{ station.idS }})" class="btn btn-sm btn-success">
                          <i class="fas fa-check"></i> Approuver
                        </button>
                        <button onclick="showStationDetails({{ station.idS }})" class="btn btn-sm btn-info ms-2">
                          <i class="fas fa-eye"></i> Détails
                        </button>
                        <button onclick="showProblemModal({{ station.idS }}, '{{ station.nom }}')" class="btn btn-sm btn-warning ms-2">
                          <i class="fas fa-exclamation-triangle"></i> Signaler Problème
                        </button>
                      </td>
                    </tr>
                  {% endfor %}
                {% endif %}
              </tbody>
            </table>
          </div>
          {% if stations is not empty %}
            <div class="d-flex justify-content-center mt-4">
              <nav aria-label="Page navigation">
                <ul class="pagination">
                  {% if currentPage > 1 %}
                    <li class="page-item">
                      <a class="page-link" href="{{ path('station_page', {'page': currentPage - 1}) }}" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                      </a>
                    </li>
                  {% endif %}
                  
                  {% for page in 1..totalPages %}
                    <li class="page-item {{ page == currentPage ? 'active' : '' }}">
                      <a class="page-link" href="{{ path('station_page', {'page': page}) }}">{{ page }}</a>
                    </li>
                  {% endfor %}
                  
                  {% if currentPage < totalPages %}
                    <li class="page-item">
                      <a class="page-link" href="{{ path('station_page', {'page': currentPage + 1}) }}" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                      </a>
                    </li>
                  {% endif %}
                </ul>
              </nav>
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</div>

<style>
.pagination {
  margin: 0;
}

.page-item.active .page-link {
  background-color: #5e72e4;
  border-color: #5e72e4;
}

.page-link {
  color: #5e72e4;
  padding: 0.5rem 0.75rem;
  border: 1px solid #dee2e6;
  margin: 0 2px;
  border-radius: 4px;
}

.page-link:hover {
  color: #324cdd;
  background-color: #e9ecef;
  border-color: #dee2e6;
}

.page-item.disabled .page-link {
  color: #6c757d;
  pointer-events: none;
  background-color: #fff;
  border-color: #dee2e6;
}
</style>

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Search functionality
  document.getElementById('searchInput').addEventListener('keyup', function() {
    var input = this.value.toLowerCase();
    var table = document.getElementById('stationsTable');
    var rows = table.getElementsByTagName('tr');

    for (var i = 1; i < rows.length; i++) {
      var showRow = false;
      var cells = rows[i].getElementsByTagName('td');
      
      for (var j = 0; j < cells.length; j++) {
        if (cells[j].textContent.toLowerCase().indexOf(input) > -1) {
          showRow = true;
          break;
        }
      }
      
      rows[i].style.display = showRow ? '' : 'none';
    }
  });
  
  // Initialize problem modal
  var problemModalEl = document.getElementById('problemModal');
  if (typeof bootstrap !== 'undefined') {
    window.problemModal = new bootstrap.Modal(problemModalEl);
  } else {
    console.error('Bootstrap is not loaded or not available');
  }
  
  // Setup event listener for send button
  document.getElementById('send-report').addEventListener('click', sendProblemReport);
});

function approveStation(stationId) {
    if (confirm('Êtes-vous sûr de vouloir approuver cette station ?')) {
        fetch(`/admin/stations/${stationId}/approuver`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRF-TOKEN': '{{ csrf_token('approuver-station') }}'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Show success message
                alert('Station approuvée avec succès');
                // Remove the row from the table
                const row = document.querySelector(`tr[data-station-id="${stationId}"]`);
                if (row) {
                    row.remove();
                }
                // Check if table is empty
                const tbody = document.querySelector('#stationsTable tbody');
                if (tbody && tbody.children.length === 0) {
                    // Add empty message row
                    const emptyRow = document.createElement('tr');
                    emptyRow.innerHTML = `
                        <td colspan="7" class="text-center py-4">
                            <p class="text-sm mb-0">Aucune station en attente d'approbation</p>
                        </td>
                    `;
                    tbody.appendChild(emptyRow);
                }
            } else {
                alert(data.message || 'Une erreur est survenue lors de l\'approbation');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Une erreur est survenue lors de l\'approbation');
        });
    }
}

function showStationDetails(stationId) {
  // Redirect to station details page
  window.location.href = `/admin/stations/${stationId}/details`;
}

// Modal handling
let currentStationId;

function showProblemModal(stationId, stationName) {
  currentStationId = stationId;
  document.getElementById('stationId').value = stationId;
  document.getElementById('station-name').value = stationName;
  document.getElementById('description').value = '';
  
  // Show modal - using window object to access the modal
  if (window.problemModal) {
    window.problemModal.show();
  } else {
    // Fallback to jQuery if Bootstrap modal object isn't available
    try {
      $('#problemModal').modal('show');
    } catch (e) {
      console.error('Error showing modal:', e);
      alert('Une erreur est survenue lors de l\'ouverture du formulaire. Veuillez réessayer.');
    }
  }
}

function sendProblemReport() {
  const description = document.getElementById('description').value.trim();
  
  // Validate form
  if (!description) {
    document.getElementById('description').classList.add('is-invalid');
    return;
  }
  
  document.getElementById('description').classList.remove('is-invalid');
  
  // Disable button and show loading state
  const sendButton = document.getElementById('send-report');
  const originalText = sendButton.innerHTML;
  sendButton.disabled = true;
  sendButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Envoi...';
  
  // Prepare form data
  const formData = new FormData();
  formData.append('description', description);
  
  console.log('Submitting problem report:', {
    stationId: currentStationId,
    description: description
  });
  
  // Send ajax request
  fetch(`/admin/stations/${currentStationId}/signaler-probleme`, {
    method: 'POST',
    body: formData,
    headers: {
      'X-Requested-With': 'XMLHttpRequest'
    },
    // Do not set Content-Type header when using FormData
    // The browser will set it automatically with the correct boundary
  })
  .then(response => {
    if (!response.ok) {
      console.error('HTTP Error:', response.status, response.statusText);
      return response.text().then(text => {
        throw new Error(`HTTP error! Status: ${response.status}, Response: ${text}`);
      });
    }
    return response.json();
  })
  .then(data => {
    console.log('Response data:', data);
    
    // Close modal
    if (window.problemModal) {
      window.problemModal.hide();
    } else {
      try {
        $('#problemModal').modal('hide');
      } catch (e) {
        console.error('Error hiding modal:', e);
      }
    }
    
    // Show result
    if (data.success) {
      alert(data.message || 'Problème signalé avec succès');
    } else {
      alert(data.message || 'Une erreur est survenue lors de l\'envoi du rapport');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Une erreur est survenue lors de l\'envoi du rapport: ' + error.message);
  })
  .finally(() => {
    // Reset button state
    sendButton.disabled = false;
    sendButton.innerHTML = originalText;
  });
}
</script>
{% endblock %}

<!-- Modal for Problem Reporting -->
<div class="modal fade" id="problemModal" tabindex="-1" aria-labelledby="problemModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="problemModalLabel">Signaler un problème</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="problemForm">
          <input type="hidden" id="stationId" name="stationId">
          <div class="mb-3">
            <label for="station-name" class="form-label">Station</label>
            <input type="text" class="form-control" id="station-name" readonly>
          </div>
          <div class="mb-3">
            <label for="description" class="form-label">Description du problème</label>
            <textarea class="form-control" id="description" name="description" rows="5" required></textarea>
            <div class="invalid-feedback">
              Veuillez fournir une description du problème.
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
        <button type="button" class="btn btn-primary" id="send-report">Envoyer</button>
      </div>
    </div>
  </div>
</div>

{% endblock %}

