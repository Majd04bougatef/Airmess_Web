{% extends 'base.html.twig' %}

{% block body %}
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion des vélos - Chat</title>
    <style>
        /* Reset all margins and padding */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
        }
        
        .navbar {
            display: flex;
            background: #ffffff;
            padding: 10px;
            justify-content: center;
            margin: 20px auto 0;
            gap: 20px;
            width: 90%;
            max-width: 1200px;
            border-radius: 10px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .navbar a {
            color: black;
            text-decoration: none;
            padding: 10px 15px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .navbar .nav-link:hover {
            color: #6c99bc;
            border-bottom: 2px solid #6c99bc;
        }
        
        /* Active link */
        .navbar .nav-link.active {
            color: #6c99bc;
            border-bottom: 2px solid #6c99bc;
        }
        
        /* Zone de contenu */
        .content {
            padding: 20px;
            margin: 20px auto;
            width: 90%;
            max-width: 1200px;
        }
        
        /* Chat Container */
        .chat-container {
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            height: 500px;
        }
        
        /* Chat Header */
        .chat-header {
            background-color: #6c99bc;
            color: white;
            padding: 15px;
            text-align: center;
            font-weight: bold;
        }
        
        /* Messages Area */
        .messages-area {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            display: flex;
            flex-direction: column;
        }
        
        /* Message Bubbles */
        .message {
            max-width: 70%;
            padding: 10px 15px;
            margin-bottom: 15px;
            border-radius: 18px;
            font-size: 14px;
            position: relative;
        }
        
        .user-message {
            background-color: #e1f5fe;
            color: #000;
            align-self: flex-end;
            border-bottom-right-radius: 5px;
        }
        
        .admin-message {
            background-color: #6c99bc;
            color: white;
            align-self: flex-start;
            border-bottom-left-radius: 5px;
        }
        
        .message-time {
            font-size: 11px;
            opacity: 0.7;
            margin-top: 5px;
            text-align: right;
        }
        
        /* Message Form */
        .message-form {
            display: flex;
            padding: 15px;
            background-color: #f9f9f9;
            border-top: 1px solid #e0e0e0;
        }
        
        .message-input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
            font-size: 14px;
        }
        
        .send-button {
            background-color: #6c99bc;
            color: white;
            border: none;
            border-radius: 20px;
            padding: 10px 20px;
            margin-left: 10px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .send-button:hover {
            background-color: #5a7f9c;
        }
        
        /* Statut de connexion */
        .connection-status {
            padding: 5px 10px;
            text-align: center;
            font-size: 12px;
            color: #777;
            background-color: #f0f0f0;
        }

        /* Style spécifique pour le formulaire Symfony */
        .form-group {
            width: 100%;
            display: flex;
        }

        /* Cache les labels de formulaire mais reste accessible */
        .form-group label {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }

        /* Style pour le bouton du formulaire */
        .form-group button {
            background-color: #6c99bc;
            color: white;
            border: none;
            border-radius: 20px;
            padding: 10px 20px;
            margin-left: 10px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .form-group button:hover {
            background-color: #5a7f9c;
        }
    </style>
</head>
<body>
    <!-- Menu Horizontal -->
     <div class="navbar">
        <a class="nav-link" onclick="loadPage('{{ path('app_reservation_transport_station') }}')">Réserver</a>
        <a class="nav-link" onclick="loadPage('{{ path('app_reservation_transport_index') }}')">Mes Réservations</a>
        <a class="nav-link" onclick="loadPage('{{ path('app_reservation_transport_station') }}')">Stations</a>
        <a class="nav-link" onclick="loadPage('{{ path('app_message_voyageurs') }}')">Discussions</a>
    </div>
    
    <!-- Contenu Dynamique -->
    <div class="content" id="pageContent">
        <div class="chat-container">
            <div class="chat-header">
                Discuter avec notre service client
            </div>
            <div class="connection-status">
                <span id="status-indicator">En ligne</span> - Agent disponible
            </div>
            <div class="messages-area" id="messages">
                <!-- Chargement des messages depuis la base de données -->
                {% if messages is defined %}
                    {% for message in messages %}
                        {% if message.sender.idU == 40 %}
                            <div class="message user-message">
                                {{ message.content }}
                                <div class="message-time">{{ message.dateM|date('H:i') }}</div>
                            </div>
                        {% else %}
                            <div class="message admin-message">
                                {{ message.content }}
                                <div class="message-time">{{ message.dateM|date('H:i') }}</div>
                            </div>
                        {% endif %}
                    {% endfor %}
                {% else %}
                    <!-- Message de bienvenue par défaut -->
                    <div class="message admin-message">
                        Bonjour ! Comment puis-je vous aider aujourd'hui concernant nos services de vélos ?
                        <div class="message-time">{{ "now"|date('H:i') }}</div>
                    </div>
                {% endif %}
            </div>
          
            <div class="message-form">
                {{ form_start(form, {'method': 'POST', 'action': path('app_message_new'),'attr': {'id': 'message-form', 'class': 'form-group'}}) }}
                    {{ form_widget(form.content, {'attr': {'class': 'message-input', 'placeholder': 'Écrivez votre message...', 'id': 'message-input'}}) }}
                                       
                    <button type="submit" class="send-button">Envoyer</button>
                {{ form_end(form) }}
            </div>
        </div>
    </div>
    
    <script>
       document.addEventListener("DOMContentLoaded", function () {
    // Faire défiler vers le bas pour montrer les derniers messages
    const messagesArea = document.getElementById('messages');
    messagesArea.scrollTop = messagesArea.scrollHeight;
    
    // Traitement du formulaire pour utiliser AJAX
    const form = document.getElementById('message-form');
    
    form.addEventListener('submit', function(event) {
        event.preventDefault();
        
        // Récupérer le contenu du message
        const messageInput = document.getElementById('message-input');
        const messageContent = messageInput.value.trim();
        
        if (messageContent === '') return;
        
        // Afficher immédiatement le message dans l'interface
        const currentTime = new Date();
        const timeString = currentTime.getHours() + ':' + (currentTime.getMinutes() < 10 ? '0' : '') + currentTime.getMinutes();
        
        const messageElement = document.createElement('div');
        messageElement.className = 'message user-message';
        messageElement.innerHTML = `
            ${messageContent}
            <div class="message-time">${timeString}</div>
        `;
        
        messagesArea.appendChild(messageElement);
        
        // Faire défiler vers le bas
        messagesArea.scrollTop = messagesArea.scrollHeight;
        
        // Envoyer le formulaire via AJAX
        fetch(form.action, {
            method: 'POST',
            body: new FormData(form),
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.text())
        .then(html => {
            // Met à jour seulement la partie messages
            messagesArea.innerHTML = html;
            
            // Vide le champ
            messageInput.value = '';
            
            // Scroll vers le bas
            messagesArea.scrollTop = messagesArea.scrollHeight;
        })
        .catch(error => {
            console.error('Erreur lors de l\'envoi du message:', error);
        });
    });
    
    // Fonction pour charger les messages
    function loadMessages() {
        fetch('/message/chatVoyageurs', {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.text())
        .then(html => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const newMessages = doc.querySelector('.messages-area');
            
            if (newMessages) {
                messagesArea.innerHTML = newMessages.innerHTML;
                messagesArea.scrollTop = messagesArea.scrollHeight;
            }
        })
        .catch(error => {
            console.error('Erreur lors du chargement des messages:', error);
        });
    }
    
    // Rafraîchir les messages périodiquement
    setInterval(loadMessages, 10000);
});
    </script>
</body>
</html>
{% endblock %}