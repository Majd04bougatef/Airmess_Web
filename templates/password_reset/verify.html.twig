<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vérification de code - Airmess</title>
    <link rel="icon" href="{{ asset('images/logo-airmess.png') }}" type="image/png">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(to right, #a9cfff, #d0c7ff, #ffbde6);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            padding: 20px;
        }
        .verification-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 450px;
            padding: 2rem;
        }
        .logo-container {
            text-align: center;
            margin-bottom: 1.5rem;
        }
        .logo-container img {
            width: 50px;
            height: 50px;
            margin-bottom: 1rem;
        }
        h2 {
            color: #333;
            font-size: 1.75rem;
            font-weight: 500;
            text-align: center;
            margin-bottom: 1.5rem;
        }
        .code-input-container {
            display: flex;
            justify-content: space-between;
            margin-bottom: 2rem;
        }
        .code-digit {
            width: 45px;
            height: 55px;
            font-size: 24px;
            text-align: center;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            background-color: #f8f9fa;
            transition: all 0.3s ease;
        }
        .code-digit:focus {
            border-color: #d0c7ff;
            box-shadow: 0 0 0 3px rgba(208, 199, 255, 0.1);
            outline: none;
        }
        .hidden-input {
            position: absolute;
            opacity: 0;
            width: 1px;
            height: 1px;
        }
        .btn-verify {
            background: linear-gradient(to right, #a9cfff, #d0c7ff, #ffbde6);
            border: none;
            border-radius: 50px;
            padding: 12px 24px;
            font-weight: 500;
            width: 100%;
            color: white;
            transition: all 0.3s ease;
        }
        .btn-verify:hover {
            opacity: 0.9;
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(208, 199, 255, 0.4);
        }
        .timer {
            color: #666;
            font-size: 0.9rem;
            text-align: center;
            margin: 1rem 0;
        }
        .links {
            text-align: center;
            margin-top: 1.5rem;
        }
        .links a {
            color: #d0c7ff;
            text-decoration: none;
            font-size: 0.9rem;
            transition: color 0.3s ease;
        }
        .links a:hover {
            color: #a9cfff;
            text-decoration: underline;
        }
        .email-sent {
            text-align: center;
            color: #666;
            margin-bottom: 2rem;
            padding: 0 1rem;
        }
        .email-sent strong {
            color: #333;
            word-break: break-all;
        }
        .alert {
            border-radius: 12px;
            margin-bottom: 1.5rem;
        }
    </style>
</head>
<body>
    <div class="verification-container">
        <div class="logo-container">
            <img src="{{ asset('images/logo-airmess.png') }}" alt="Airmess Logo">
            <h2>Vérification de code</h2>
        </div>
        
        {% for flash_message in app.flashes('success') %}
            <div class="alert alert-success">
                {{ flash_message }}
            </div>
        {% endfor %}
        
        {% for flash_message in app.flashes('error') %}
            <div class="alert alert-danger">
                {{ flash_message }}
            </div>
        {% endfor %}
        
        {% if error %}
            <div class="alert alert-danger">
                {{ error }}
            </div>
        {% endif %}
        
        <div class="email-sent">
            Un code de vérification a été envoyé à<br>
            <strong>{{ email }}</strong>.<br>
            Veuillez vérifier votre boîte de réception et entrer le code ci-dessous.
        </div>
        
        <form action="{{ path('app_password_reset_verify') }}" method="post" id="verification-form">
            <div class="code-input-container" id="code-inputs">
                <input type="text" class="code-digit" maxlength="1" data-index="0" autocomplete="off">
                <input type="text" class="code-digit" maxlength="1" data-index="1" autocomplete="off">
                <input type="text" class="code-digit" maxlength="1" data-index="2" autocomplete="off">
                <input type="text" class="code-digit" maxlength="1" data-index="3" autocomplete="off">
                <input type="text" class="code-digit" maxlength="1" data-index="4" autocomplete="off">
                <input type="text" class="code-digit" maxlength="1" data-index="5" autocomplete="off">
            </div>
            
            <input type="text" id="verification_code" name="verification_code" class="hidden-input" maxlength="6" required>
            
            <div class="timer">
                Ce code expire dans: <span id="timer">02:00</span>
            </div>
            
            <button type="submit" class="btn btn-verify">
                Vérifier
            </button>
        </form>
        
        <div class="links">
            <p>Vous n'avez pas reçu de code? <a href="{{ path('app_password_reset_resend') }}">Renvoyer le code</a></p>
            <p><a href="{{ path('app_password_reset_request') }}">Retour à la réinitialisation</a></p>
        </div>
    </div>

    <!-- Only include necessary JavaScript -->
    <script>
        (function() {
            'use strict';
            
            // Wait for DOM to be ready
            function ready(fn) {
                if (document.readyState !== 'loading') {
                    fn();
                } else {
                    document.addEventListener('DOMContentLoaded', fn);
                }
            }
            
            ready(function() {
                // Timer functionality
                const timerElement = document.getElementById('timer');
                if (!timerElement) return;
                
                let timeLeft = {{ remaining_seconds|default(120) }};
                
                function updateTimer() {
                    if (!timerElement) return;
                    
                    const minutes = Math.floor(timeLeft / 60);
                    const seconds = timeLeft % 60;
                    const formattedSeconds = seconds < 10 ? '0' + seconds : seconds;
                    
                    timerElement.textContent = minutes + ':' + formattedSeconds;
                    
                    if (timeLeft <= 0) {
                        clearInterval(timerInterval);
                        timerElement.textContent = "Expiré";
                        timerElement.style.color = "#dc3545";
                        return;
                    }
                    
                    timeLeft--;
                }
                
                const timerInterval = setInterval(updateTimer, 1000);
                updateTimer();
                
                // Verification code handling
                const hiddenInput = document.getElementById('verification_code');
                const form = document.getElementById('verification-form');
                const codeInputs = document.querySelectorAll('.code-digit');
                
                if (!hiddenInput || !form || !codeInputs.length) return;
                
                // Pre-fill code digits if a value exists
                if (hiddenInput.value) {
                    const codeChars = hiddenInput.value.split('');
                    codeChars.forEach((char, index) => {
                        if (index < codeInputs.length) {
                            codeInputs[index].value = char;
                        }
                    });
                }
                
                // Update hidden input when code digits change
                function updateHiddenInput() {
                    let code = '';
                    codeInputs.forEach(input => {
                        code += input.value || '';
                    });
                    hiddenInput.value = code;
                    
                    // Auto-submit when complete
                    if (code.length === 6) {
                        form.submit();
                    }
                }
                
                // Handle digit input
                codeInputs.forEach((input, index) => {
                    // Focus handling
                    input.addEventListener('keydown', function(e) {
                        // Allow only number inputs and control keys
                        if (
                            !/^[0-9]$/.test(e.key) && 
                            !['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab'].includes(e.key)
                        ) {
                            e.preventDefault();
                        }
                        
                        // Handle backspace to go to previous input
                        if (e.key === 'Backspace' && !this.value && index > 0) {
                            codeInputs[index - 1].focus();
                            codeInputs[index - 1].select();
                        }
                    });
                    
                    // Handle input changes
                    input.addEventListener('input', function(e) {
                        // Only allow numbers
                        this.value = this.value.replace(/[^0-9]/g, '');
                        
                        updateHiddenInput();
                        
                        // Move to next input on entry
                        if (this.value && index < codeInputs.length - 1) {
                            codeInputs[index + 1].focus();
                        }
                    });
                    
                    // Handle paste event
                    input.addEventListener('paste', function(e) {
                        e.preventDefault();
                        
                        // Get pasted content
                        const paste = (e.clipboardData || window.clipboardData).getData('text');
                        if (!paste) return;
                        
                        // Extract only digits
                        const digits = paste.replace(/[^0-9]/g, '').slice(0, 6);
                        
                        // Fill inputs with pasted digits
                        digits.split('').forEach((digit, idx) => {
                            if (idx < codeInputs.length) {
                                codeInputs[idx].value = digit;
                            }
                        });
                        
                        // Focus the next empty input or the last one
                        const nextEmptyIndex = digits.length < codeInputs.length ? digits.length : codeInputs.length - 1;
                        codeInputs[nextEmptyIndex].focus();
                        
                        updateHiddenInput();
                    });
                });
                
                // Focus first input on load
                codeInputs[0].focus();
            });
        })();
    </script>
</body>
</html> 