{% extends 'dashVoyageurs/dashboardVoyageurs.html.twig' %}

{% block title %}Change Password - Airmess{% endblock %}

{% block body %}
<div class="container py-4">
    <div id="alert-container">
        <!-- Alerts will be dynamically inserted here -->
    </div>
    
    <div class="card shadow">
        <div class="card-header bg-warning text-dark">
            <div class="d-flex justify-content-between align-items-center">
                <h3 class="mb-0"><i class="fas fa-key me-2"></i> Change Password</h3>
                <a href="{{ path('profileVoyageurs_page') }}" class="btn btn-outline-dark btn-sm">
                    <i class="fas fa-arrow-left me-1"></i> Back to Profile
                </a>
            </div>
        </div>
        
        <div class="card-body">
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <form id="password-change-form" action="{{ path('update_password_ajax') }}" method="post">
                        <div class="mb-4">
                            <p class="text-muted">For security reasons, please enter your current password before setting a new one. Your new password must be at least 6 characters long and include both letters and numbers.</p>
                        </div>
                        
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label fw-bold">Current Password</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-lock"></i></span>
                                <input type="password" class="form-control" id="currentPassword" name="current_password" required>
                            </div>
                            <div class="form-text">Enter your current password for verification</div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="newPassword" class="form-label fw-bold">New Password</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-key"></i></span>
                                <input type="password" class="form-control" id="newPassword" name="password" required>
                                <button class="btn btn-outline-secondary" type="button" id="toggleNewPassword">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                            <div class="form-text">Minimum 6 characters, must include letters and numbers</div>
                        </div>
                        
                        <div class="mb-4">
                            <label for="confirmPassword" class="form-label fw-bold">Confirm New Password</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-check"></i></span>
                                <input type="password" class="form-control" id="confirmPassword" name="confirm_password" required>
                                <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                            <div class="form-text">Re-enter your new password to confirm</div>
                        </div>
                        
                        <div class="password-strength-meter mb-4 d-none" id="passwordStrength">
                            <label class="form-label">Password Strength</label>
                            <div class="progress" style="height: 10px;">
                                <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                            <small class="form-text text-muted" id="passwordStrengthText"></small>
                        </div>
                        
                        <input type="hidden" name="_csrf_token" value="{{ csrf_token('password_update') }}">
                        
                        <div id="password-error" class="alert alert-danger mt-3 d-none"></div>
                        
                        <div class="d-grid gap-2 mt-4">
                            <button type="submit" class="btn btn-warning" id="savePasswordBtn">
                                <i class="fas fa-save me-1"></i> Update Password
                            </button>
                            <a href="{{ path('profileVoyageurs_page') }}" class="btn btn-outline-secondary">
                                <i class="fas fa-times me-1"></i> Cancel
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Form elements
    const form = document.getElementById('password-change-form');
    const currentPassword = document.getElementById('currentPassword');
    const newPassword = document.getElementById('newPassword');
    const confirmPassword = document.getElementById('confirmPassword');
    const errorEl = document.getElementById('password-error');
    const saveBtn = document.getElementById('savePasswordBtn');
    const passwordStrength = document.getElementById('passwordStrength');
    const passwordStrengthBar = passwordStrength.querySelector('.progress-bar');
    const passwordStrengthText = document.getElementById('passwordStrengthText');
    
    // Toggle password visibility
    document.getElementById('toggleNewPassword').addEventListener('click', function() {
        togglePasswordVisibility(newPassword, this);
    });
    
    document.getElementById('toggleConfirmPassword').addEventListener('click', function() {
        togglePasswordVisibility(confirmPassword, this);
    });
    
    function togglePasswordVisibility(inputField, button) {
        if (inputField.type === 'password') {
            inputField.type = 'text';
            button.innerHTML = '<i class="fas fa-eye-slash"></i>';
        } else {
            inputField.type = 'password';
            button.innerHTML = '<i class="fas fa-eye"></i>';
        }
    }
    
    // Password strength meter
    newPassword.addEventListener('input', function() {
        if (this.value.length > 0) {
            passwordStrength.classList.remove('d-none');
            updatePasswordStrength(this.value);
        } else {
            passwordStrength.classList.add('d-none');
        }
    });
    
    function updatePasswordStrength(password) {
        // Simple password strength calculation
        let strength = 0;
        
        // Length check
        if (password.length >= 6) strength += 20;
        if (password.length >= 10) strength += 10;
        
        // Contains lowercase letters
        if (/[a-z]/.test(password)) strength += 10;
        
        // Contains uppercase letters
        if (/[A-Z]/.test(password)) strength += 20;
        
        // Contains numbers
        if (/\d/.test(password)) strength += 20;
        
        // Contains special characters
        if (/[^A-Za-z0-9]/.test(password)) strength += 20;
        
        // Update the progress bar
        passwordStrengthBar.style.width = strength + '%';
        passwordStrengthBar.setAttribute('aria-valuenow', strength);
        
        // Set the color of the progress bar based on strength
        if (strength < 40) {
            passwordStrengthBar.className = 'progress-bar bg-danger';
            passwordStrengthText.textContent = 'Weak password';
        } else if (strength < 70) {
            passwordStrengthBar.className = 'progress-bar bg-warning';
            passwordStrengthText.textContent = 'Moderate password';
        } else {
            passwordStrengthBar.className = 'progress-bar bg-success';
            passwordStrengthText.textContent = 'Strong password';
        }
    }
    
    // Handle form submission
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Reset previous errors
        errorEl.classList.add('d-none');
        errorEl.textContent = '';
        
        // Validate form
        const errors = [];
        
        if (!currentPassword.value || !newPassword.value || !confirmPassword.value) {
            errors.push('All fields are required');
        }
        
        if (newPassword.value !== confirmPassword.value) {
            errors.push('New passwords do not match');
        }
        
        // Password strength validation
        if (newPassword.value.length < 6) {
            errors.push('Password must be at least 6 characters long');
        }
        
        // Check for complexity - requires at least one number and one letter
        if (!/\d/.test(newPassword.value) || !/[a-zA-Z]/.test(newPassword.value)) {
            errors.push('Password must contain at least one letter and one number');
        }
        
        // Display any errors found
        if (errors.length > 0) {
            errorEl.innerHTML = errors.map(err => `<div>${err}</div>`).join('');
            errorEl.classList.remove('d-none');
            return;
        }
        
        // Show loading state
        const originalText = saveBtn.innerHTML;
        saveBtn.disabled = true;
        saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
        
        // Get the CSRF token
        const csrfToken = document.querySelector('input[name="_csrf_token"]').value;
        
        // Send update request
        fetch('{{ path('update_password_ajax') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRF-Token': csrfToken
            },
            body: JSON.stringify({
                current_password: currentPassword.value,
                password: newPassword.value,
                confirm_password: confirmPassword.value
            })
        })
        .then(response => {
            const contentType = response.headers.get('content-type');
            if (!response.ok) {
                if (contentType && contentType.includes('application/json')) {
                    return response.json().then(data => {
                        throw new Error(data.message || 'Server returned error ' + response.status);
                    });
                }
                throw new Error('Server returned ' + response.status);
            }
            
            if (contentType && contentType.includes('application/json')) {
                return response.json();
            }
            
            throw new Error('Unexpected response format');
        })
        .then(data => {
            // Reset button state
            saveBtn.disabled = false;
            saveBtn.innerHTML = originalText;
            
            if (data.success) {
                // Show success message
                showAlert('success', 'Your password has been updated successfully!');
                
                // Clear form inputs for security
                form.reset();
                
                // Redirect to profile page after a short delay
                setTimeout(() => {
                    window.location.href = "{{ path('profileVoyageurs_page') }}";
                }, 2000);
            } else {
                errorEl.textContent = data.message || 'An error occurred while updating your password.';
                errorEl.classList.remove('d-none');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            
            // Reset button state
            saveBtn.disabled = false;
            saveBtn.innerHTML = originalText;
            
            // Show error message
            errorEl.textContent = error.message || 'A network error occurred. Please try again.';
            errorEl.classList.remove('d-none');
        });
    });
    
    // Helper function to show alerts
    function showAlert(type, message) {
        const alertContainer = document.getElementById('alert-container');
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.setAttribute('role', 'alert');
        alertDiv.innerHTML = message + 
            '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>';
        
        alertContainer.innerHTML = '';
        alertContainer.appendChild(alertDiv);
        
        // Scroll to alert
        window.scrollTo({ top: 0, behavior: 'smooth' });
        
        // Auto-dismiss after 5 seconds
        setTimeout(() => {
            const bsAlert = bootstrap.Alert.getInstance(alertDiv);
            if (bsAlert) {
                bsAlert.close();
            } else {
                alertDiv.remove();
            }
        }, 5000);
    }
});
</script>
{% endblock %} 