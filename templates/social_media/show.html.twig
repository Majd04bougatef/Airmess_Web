{# Fichier : templates/social_media/show.html.twig #}
{% extends 'base.html.twig'%} {# Hérite de votre base partagée #}


{# Définit le titre de la page #}
{% block title %}{{ social_media.getTitre() }} - Détails{% endblock %}

{% block css %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/feed.css') }}">
    <style>
        :root {
            --main-accent: #4a6bda;
            --main-accent-hover: #3d58b3;
            --danger-color: #dc3545;
            --danger-color-darker: #bb2d3b;
            --light-bg: #f8f9fa;
            --card-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
            --card-radius: 12px;
            --transition-speed: 0.25s;
        }
        
        body {
            background-color: #f5f7fa;
            color: #444;
        }
        
        /* Custom animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(74, 107, 218, 0.4); }
            70% { box-shadow: 0 0 0 6px rgba(74, 107, 218, 0); }
            100% { box-shadow: 0 0 0 0 rgba(74, 107, 218, 0); }
        }
        
        .pulsate {
            animation: pulse 1.5s infinite;
        }
        
        .post-card {
            box-shadow: var(--card-shadow);
            border-radius: var(--card-radius);
            transition: all var(--transition-speed) ease;
            animation: fadeIn 0.5s ease forwards;
            max-width: 650px;
            margin: 0 auto;
        }
        
        .post-card:hover {
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            transform: translateY(-3px);
        }
        
        .post-image-container {
            max-height: 350px;
            overflow: hidden;
        }
        
        .post-image-container img {
            transition: all 0.6s ease;
            object-fit: cover;
            width: 100%;
            max-height: 350px;
        }
        
        .post-image-container:hover img {
            transform: scale(1.03);
        }
        
        .btn-action {
            border-radius: 30px;
            transition: all var(--transition-speed) ease;
            padding: 0.4rem 0.75rem;
            font-weight: 500;
            font-size: 0.9rem;
            border: none;
        }
        
        .btn-action:hover {
            background-color: rgba(0, 0, 0, 0.05);
            transform: translateY(-1px);
        }
        
        .like-button:hover, .like-button.active {
            color: var(--main-accent) !important;
        }
        
        /* Style pour l'icône Flaticon du bouton like */
        .like-button img, .like-count-badge img, 
        .dislike-button img, .dislike-count-badge img {
            transition: all 0.3s ease;
            filter: brightness(1);
        }
        
        .like-button:hover img, .like-button.active img {
            transform: scale(1.15);
            filter: drop-shadow(0px 0px 3px rgba(74, 107, 218, 0.5));
        }
        
        .dislike-button:hover img, .dislike-button.active img {
            transform: scale(1.15);
            filter: drop-shadow(0px 0px 3px rgba(220, 53, 69, 0.5));
        }
        
        .like-count-badge img {
            filter: brightness(10); /* Rend l'icône blanche pour le badge */
        }
        
        .dislike-count-badge img {
            filter: brightness(10); /* Rend l'icône blanche pour le badge */
        }
        
        .post-author-img, .comment-author-img {
            border: 2px solid #fff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);
            object-fit: cover;
        }
        
        .comment-bubble {
            background-color: var(--light-bg);
            border-radius: 16px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.03);
            padding: 0.6rem 0.9rem;
        }
        
        .comment-entry {
            animation: fadeIn 0.4s ease forwards;
            animation-delay: calc(0.08s * var(--animation-order, 0));
            margin-bottom: 1rem;
        }
        
        .comments-section {
            border-radius: 0 0 var(--card-radius) var(--card-radius);
            max-width: 650px;
            margin: 0 auto;
            position: relative;
            border-top: 1px solid rgba(0, 0, 0, 0.08);
            background-color: #f9f9fb;
        }
        
        .post-stats {
            color: #6c757d;
            font-weight: 500;
            font-size: 0.85rem;
            padding: 0.6rem 1.25rem;
            background-color: #fbfbfd;
            border-top: 1px solid rgba(0, 0, 0, 0.03);
            border-bottom: 1px solid rgba(0, 0, 0, 0.03);
            transition: background-color 0.5s ease;
        }
        
        .post-stats.highlight {
            background-color: rgba(74, 107, 218, 0.08);
        }
        
        .post-stats i {
            margin-right: 3px;
            color: var(--main-accent);
        }
        
        .section-title {
            position: relative;
            display: inline-block;
            margin-bottom: 1.5rem;
            font-weight: 600;
            color: #333;
            font-size: 1.5rem;
        }
        
        .section-title:after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 40px;
            height: 3px;
            background: linear-gradient(90deg, var(--main-accent), #71a6ff);
            border-radius: 3px;
        }
        
        .btn-send-comment {
            border-radius: 50%;
            position: absolute;
            right: 10px;
            bottom: 10px;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0;
            background-color: var(--main-accent);
            border-color: var(--main-accent);
            box-shadow: 0 2px 5px rgba(74, 107, 218, 0.3);
        }
        
        .btn-send-comment:hover, 
        .btn-send-comment:focus {
            background-color: var(--main-accent-hover);
            border-color: var(--main-accent-hover);
            transform: translateY(-1px);
        }
        
        .comment-action-link {
            color: #6c757d;
            text-decoration: none;
            font-weight: 500;
            font-size: 0.8rem;
            transition: all var(--transition-speed) ease;
        }
        
        .comment-action-link:hover {
            color: var(--main-accent);
        }
        
        .post-header {
            padding: 0.75rem 1.25rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.03);
        }
        
        .post-title {
            font-weight: 700;
            color: #333;
            font-size: 1.3rem;
            line-height: 1.3;
            margin-bottom: 0.75rem;
        }
        
        .post-content {
            padding: 1rem 1.25rem;
            line-height: 1.5;
            color: #444;
            font-size: 0.95rem;
        }
        
        .post-text {
            overflow-wrap: break-word;
            word-wrap: break-word;
        }
        
        .add-comment-form-container {
            margin-bottom: 2rem;
        }
        
        .comment-input {
            border-radius: 20px;
            padding-right: 40px;
            resize: none;
            border: 1px solid #e0e4e8;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.02);
            transition: all var(--transition-speed) ease;
        }
        
        .comment-input:focus {
            border-color: #bdc9e7;
            box-shadow: 0 0 0 3px rgba(74, 107, 218, 0.1);
        }
        
        .comment-author-name {
            color: #444;
            font-size: 0.95rem;
        }
        
        .comment-text {
            font-size: 0.9rem;
            line-height: 1.4;
            color: #555;
        }
        
        .post-actions {
            padding: 0.4rem;
        }
        
        .action-text {
            font-size: 0.9rem;
        }
        
        /* Responsive adjustments */
        @media (max-width: 767px) {
            .post-card, .comments-section {
                border-radius: var(--card-radius);
                margin-left: -0.5rem;
                margin-right: -0.5rem;
                width: calc(100% + 1rem);
            }
            
            .post-header, .post-content {
                padding: 1rem;
            }
            
            .post-stats {
                padding: 0.7rem 1rem;
            }
            
            .post-title {
                font-size: 1.3rem;
            }
        }
        
        .comments-container {
            max-height: 350px;
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: rgba(74, 107, 218, 0.2) #f5f7fa;
            padding: 0.5rem 0;
        }
        
        .comments-container::-webkit-scrollbar {
            width: 6px;
        }
        
        .comments-container::-webkit-scrollbar-track {
            background: #f5f7fa;
        }
        
        .comments-container::-webkit-scrollbar-thumb {
            background-color: rgba(74, 107, 218, 0.2);
            border-radius: 10px;
        }
        
        .section-title {
            position: relative;
            display: inline-block;
            margin-bottom: 1rem;
            font-weight: 600;
            color: #333;
            font-size: 1.2rem;
        }
        
        .section-title:after {
            content: '';
            position: absolute;
            bottom: -6px;
            left: 0;
            width: 30px;
            height: 3px;
            background: linear-gradient(90deg, var(--main-accent), #71a6ff);
            border-radius: 3px;
        }
        
        .add-comment-form-container {
            margin-bottom: 1rem;
        }
        
        .comment-input {
            border-radius: 18px;
            padding-right: 40px;
            resize: none;
            border: 1px solid #e0e4e8;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.02);
            transition: all var(--transition-speed) ease;
            font-size: 0.9rem;
        }
        
        .comments-section {
            border-radius: var(--card-radius);
            max-width: 650px;
            margin: 0 auto;
            box-shadow: var(--card-shadow);
            position: relative;
        }
        
        /* Style pour mettre en évidence la section des commentaires */
        .comments-indicator {
            position: absolute;
            top: -15px;
            left: 50%;
            transform: translateX(-50%);
            background-color: var(--main-accent);
            color: white;
            border-radius: 16px;
            padding: 3px 10px;
            font-size: 0.8rem;
            font-weight: 500;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            z-index: 3;
        }
        
        .dislike-count-badge img {
            filter: brightness(10); /* Rend l'icône blanche pour le badge */
        }
        
        .dislike-button:hover, .dislike-button.active {
            color: var(--danger-color) !important;
        }
        
        /* Badge styles for like/dislike counts */
        .like-count-badge {
            background-color: var(--main-accent);
            color: white;
            padding: 0.25rem 0.6rem;
            font-size: 0.85rem;
            transition: all var(--transition-speed) ease;
            box-shadow: 0 2px 4px rgba(74, 107, 218, 0.2);
        }
        
        .like-count-badge:hover {
            background-color: var(--main-accent-hover);
            transform: translateY(-1px);
            box-shadow: 0 3px 6px rgba(74, 107, 218, 0.3);
        }
        
        .dislike-count-badge {
            background-color: var(--danger-color);
            color: white;
            padding: 0.25rem 0.6rem;
            font-size: 0.85rem;
            transition: all var(--transition-speed) ease;
            box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);
        }
        
        .dislike-count-badge:hover {
            background-color: var(--danger-color-darker);
            transform: translateY(-1px);
            box-shadow: 0 3px 6px rgba(220, 53, 69, 0.3);
        }
        
        /* Style pour le séparateur entre like et dislike */
        .stats-separator {
            width: 1px;
            height: 20px;
            background-color: rgba(0, 0, 0, 0.1);
            display: inline-block;
        }
        
        .comment-action-link.active {
            color: var(--main-accent) !important;
        }
        
        .comment-like-btn:hover .bi-heart,
        .comment-like-btn.active .bi-heart-fill {
            transform: scale(1.2);
            transition: transform 0.2s ease;
        }
        
        .comment-like-count {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin-left: 4px;
            font-size: 0.75rem;
            font-weight: 600;
            color: var(--main-accent);
            background-color: rgba(74, 107, 218, 0.1);
            border-radius: 10px;
            padding: 0 6px;
            min-width: 18px;
            height: 18px;
        }
    </style>
{% endblock %}

{# Ce bloc REMPLACE le contenu du block body de base.html.twig #}
{% block body %}
<div class="container my-4 my-lg-5">
    <div class="row justify-content-center">
        <div class="col-md-10 col-lg-8 col-xl-7">

            {# --- Card unique contenant le post et les commentaires --- #}
            <div class="post-card bg-white overflow-hidden">
                {# En-tête du Post #}
                <header class="post-header d-flex align-items-center">
                    {% set post_author = social_media.getUser() %}
                    <div class="flex-shrink-0 me-3">
                        <img src="{{ post_author and post_author.getImagesU() ? asset('uploads/profile_pictures/' ~ post_author.getImagesU()) : asset('images/placeholder-avatar.png') }}"
                             alt="{{ post_author ? post_author.getPrenom() : 'Utilisateur' }}"
                             class="post-author-img rounded-circle" width="38" height="38">
                    </div>
                    <div class="post-author-info flex-grow-1">
                        <h5 class="post-author-name mb-0">
                            {% if post_author %}
                                <strong>{{ post_author.getPrenom() }} {{ post_author.getName() }}</strong>
                            {% else %}
                                <em class="text-muted">Utilisateur inconnu</em>
                            {% endif %}
                        </h5>
                        <small class="post-timestamp text-muted">
                            <i class="bi bi-clock me-1"></i>{{ social_media.getPublicationDate()|date('d/m/Y à H:i') }}
                        </small>
                    </div>
                </header>

                {# Contenu du Post (Titre) #}
                <div class="post-content pb-0">
                    <h3 class="post-title">{{ social_media.getTitre() }}</h3>
                </div>

                {# Image du Post (si présente) #}
                {% if social_media.getImagemedia() %}
                    <div class="post-image-container">
                        <img src="{{ asset('http://localhost/ImageSocialMedia/{{ publication.imagemedia }}/' ~ social_media.getImagemedia()) }}"
                             alt="Image pour {{ social_media.getTitre() }}">
                    </div>
                {% endif %}

                {# Contenu du Post (Texte) - séparé pour optimiser l'affichage #}
                <div class="post-content pt-2">
                    <div class="post-text">{{ social_media.getContenu()|nl2br }}</div>
                </div>

                {# Statistiques (Likes/Dislikes) #}
                <div class="post-stats d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center gap-3">
                         {% if social_media.getLikee() > 0 %}
                            <div class="d-flex align-items-center">
                                <span class="like-count-badge d-flex align-items-center justify-content-center rounded-pill">
                                    <img src="{{ asset('images/icons/like-button.png') }}" alt="J'aime" width="18" height="18" class="me-1">
                                    <span class="fw-medium text-white">{{ social_media.getLikee() }}</span>
                                </span>
                            </div>
                         {% endif %}
                         
                         {% if social_media.getLikee() > 0 and social_media.getDislike() > 0 %}
                            <div class="stats-separator mx-1"></div>
                         {% endif %}
                        
                          {% if social_media.getDislike() > 0 %}
                            <div class="d-flex align-items-center">
                                <span class="dislike-count-badge d-flex align-items-center justify-content-center rounded-pill">
                                    <img src="{{ asset('images/icons/dislike-button.png') }}" alt="Je n'aime pas" width="18" height="18" class="me-1">
                                    <span class="fw-medium text-white">{{ social_media.getDislike() }}</span>
                                </span>
                            </div>
                          {% endif %}
                    </div>
                    
                    <div>
                        <small class="text-muted d-flex align-items-center">
                            <i class="bi bi-chat-dots me-1"></i>
                            <span class="comments-count">{{ comments|length }}</span> commentaire{% if comments|length != 1 %}s{% endif %}
                     </small>
                    </div>
                 </div>

               {# Barre d'actions J'aime/Commenter/Modifier/Supprimer #}
                <div class="post-actions d-flex justify-content-around align-items-center flex-wrap">
                    {# Like Button (Form) #}
                    <form action="{{ path('app_social_media_like', {idEB: social_media.idEB}) }}" method="POST" class="d-inline m-0 flex-grow-1 mx-1 my-1 like-form">
                        <input type="hidden" name="_token" value="{{ csrf_token('like-post') }}">
                        <button type="submit" class="btn btn-action w-100 text-muted like-button {% if app.session.get('user_post_actions')[social_media.idEB] is defined and app.session.get('user_post_actions')[social_media.idEB] == 'like' %}active{% endif %}">
                            <img src="{{ asset('images/icons/like-button.png') }}" alt="J'aime" width="16" height="16" class="me-1"> <span class="action-text">J'aime</span>
                        </button>
                    </form>

                    {# Dislike Button (Form) #}
                    <form action="{{ path('app_social_media_dislike', {idEB: social_media.idEB}) }}" method="POST" class="d-inline m-0 flex-grow-1 mx-1 my-1 dislike-form">
                        <input type="hidden" name="_token" value="{{ csrf_token('dislike-post') }}">
                        <button type="submit" class="btn btn-action w-100 text-muted dislike-button {% if app.session.get('user_post_actions')[social_media.idEB] is defined and app.session.get('user_post_actions')[social_media.idEB] == 'dislike' %}active{% endif %}">
                            <img src="{{ asset('images/icons/dislike-button.png') }}" alt="Je n'aime pas" width="16" height="16" class="me-1"> <span class="action-text">Je n'aime pas</span>
    </button>
                    </form>

    {# Comment Link/Button #}
                    <a href="#comments-area" class="btn btn-action flex-grow-1 text-muted mx-1 my-1">
                        <i class="bi bi-chat-dots me-1"></i> <span class="action-text">Commenter</span>
    </a>

                    {# Admin Actions #}
    {% if post_author and post_author.getIdU() == default_user_id %}
                        {# Edit Button #}
                        <a href="{{ path('app_social_media_edit', {idEB: social_media.idEB}) }}" class="btn btn-action flex-grow-1 text-muted mx-1 my-1">
                            <i class="bi bi-pencil-square me-1"></i> <span class="action-text">Éditer</span>
                        </a>

                        {# Delete Button #}
                        <form action="{{ path('app_social_media_delete', {idEB: social_media.idEB}) }}" method="POST" class="d-inline m-0 flex-grow-1 mx-1 my-1" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cette publication ?');">
            <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ social_media.idEB) }}">
            <button type="submit" class="btn btn-action w-100 text-danger">
                                <i class="bi bi-trash me-1"></i> <span class="action-text">Supprimer</span>
            </button>
        </form>
    {% endif %}
</div>

                {# --- Section Commentaires intégrée --- #}
                <div id="comments-area" class="comments-section p-3">
                    <h3 class="section-title fs-5">Commentaires</h3>

                {# Formulaire Ajout Commentaire #}
                    <div class="add-comment-form-container d-flex align-items-start">
                        {% set current_user = app.user %}
                        <div class="flex-shrink-0 me-2">
                         <img src="{{ current_user and current_user.getImagesU() ? asset('uploads/profile_pictures/' ~ current_user.getImagesU()) : asset('images/placeholder-avatar.png') }}"
                              alt="Votre avatar"
                                class="comment-author-img rounded-circle" width="32" height="32">
                     </div>
                     <div class="flex-grow-1">
                        <form name="{{ comment_form.vars.name }}" method="{{ comment_form.vars.method }}" action="{{ comment_form.vars.action }}" class="add-comment-form" id="comment-form">
                            <div class="position-relative">
                                {{ form_widget(comment_form.description, {'attr': {'rows': 1, 'placeholder': 'Écrivez un commentaire...', 'class': 'form-control comment-input py-2 px-3', 'id': 'comment-input'}}) }}
                                {{ form_errors(comment_form.description) }}
                                <button type="submit" class="btn btn-primary btn-send-comment" id="submit-comment" aria-label="Publier le commentaire">
                                    <i class="bi bi-send-fill"></i>
                                </button>
                            </div>
                            {{ form_rest(comment_form) }}
                            <input type="hidden" name="_token" value="{{ csrf_token('comment_token') }}">
                        </form>
                     </div>
                </div>

                    {# Séparateur visuel #}
                    <hr class="my-2 text-muted">

                {# Liste des Commentaires Existants #}
                    <div id="comments-list" class="comments-container">
    {% if comments is defined and comments|length > 0 %}
        {% for commentaire in comments %}
            {% set comment_author = commentaire.getUser() %}
                                {% set animation_order = loop.index %}
                                <div class="comment-entry d-flex align-items-start" id="comment-{{ commentaire.idC }}" style="--animation-order: {{ animation_order }}">
                 {# Image Auteur Commentaire #}
                                    <div class="flex-shrink-0 me-2">
                    <img src="{{ comment_author and comment_author.getImagesU() ? asset('uploads/profile_pictures/' ~ comment_author.getImagesU()) : asset('images/placeholder-avatar.png') }}"
                         alt="{{ comment_author ? comment_author.getPrenom() : 'Avatar' }}"
                                            class="comment-author-img rounded-circle" width="28" height="28">
                </div>
                 {# Bulle Commentaire + Meta #}
                <div class="flex-grow-1">
                                        <div class="comment-bubble">
                        <strong class="comment-author-name d-block mb-1">
                            {% if comment_author %}
                                {{ comment_author.getPrenom() }} {{ comment_author.getName() }}
                            {% else %}
                                Utilisateur inconnu
                            {% endif %}
                        </strong>
                        <p class="comment-text mb-0">{{ commentaire.getDescription()|nl2br }}</p>
                    </div>
                                        {# Meta Données Commentaire #}
                                        <div class="comment-meta mt-1 ps-2 d-flex align-items-center flex-wrap">
                        {# Date #}
                                            <small class="text-muted me-3">
                                                <i class="bi bi-clock"></i>
                                                Commentaire #{{ commentaire.idC }}
                        </small>

                                            {# Actions simplifiées #}
                                            <a href="#" 
                                               class="comment-action-link small me-3 comment-like-btn {% if app.session.get('user_comment_actions')[commentaire.idC] is defined and app.session.get('user_comment_actions')[commentaire.idC] == 'like' %}active text-primary{% endif %}"
                                               data-comment-id="{{ commentaire.idC }}">
                                                <i class="bi {% if app.session.get('user_comment_actions')[commentaire.idC] is defined and app.session.get('user_comment_actions')[commentaire.idC] == 'like' %}bi-heart-fill{% else %}bi-heart{% endif %}"></i> 
                                                <span class="like-label">J'aime</span>
                                                {% if commentaire.numberlike > 0 %}
                                                    <span class="comment-like-count">{{ commentaire.numberlike }}</span>
                                                {% endif %}
                                            </a>
                                            <form id="like-comment-form-{{ commentaire.idC }}" action="{{ path('app_commentaire_like', {'idC': commentaire.idC}) }}" method="POST" class="d-none">
                                                <input type="hidden" name="_token" value="{{ csrf_token('like_commentaire' ~ commentaire.idC) }}">
                                            </form>
                                            
                                            {% if comment_author and comment_author.getIdU() == default_user_id %}
                                                <a href="#" class="comment-action-link small me-3 edit-comment-btn" data-comment-id="{{ commentaire.idC }}">
        <i class="bi bi-pencil-square"></i> Modifier
    </a>

                                                <a href="#" 
                                                   class="comment-action-link small text-danger"
                                                   onclick="event.preventDefault(); if(confirm('Êtes-vous sûr de vouloir supprimer ce commentaire ?')) { document.getElementById('delete-form-{{ commentaire.idC }}').submit(); }">
                                                    <i class="bi bi-trash"></i> Supprimer
                                                </a>
                                                <form id="delete-form-{{ commentaire.idC }}" action="{{ path('app_commentaire_delete', {'idC': commentaire.idC}) }}" method="POST" class="d-none">
        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ commentaire.idC) }}">
    </form>
{% endif %}
                                        </div>
                                    </div>
                                </div>
        {% endfor %}
    {% else %}
                            <div class="text-center text-muted py-2">
                                <i class="bi bi-chat-left-dots fs-4 mb-2 d-block opacity-50"></i>
                                <p class="mb-0">Soyez le premier à commenter cette publication.</p>
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{# Ajout du footer avec attributions Flaticon #}
<div class="container mt-4">
    <div class="row">
        <div class="col-12 text-center text-muted small">
            <a href="https://www.flaticon.com/fr/icones-gratuites/pouces-vers-le-haut" title="pouces vers le haut icônes" class="text-decoration-none text-muted">Pouces vers le haut icônes créées par Freepik - Flaticon</a> • 
            <a href="https://www.flaticon.com/fr/icones-gratuites/ne-pas-aimer" title="ne pas aimer icônes" class="text-decoration-none text-muted">Ne pas aimer icônes créées par Md Tanvirul Haque - Flaticon</a>
        </div>
    </div>
</div>
{% endblock %} {# Fin block body #}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add AJAX functionality to like and dislike forms
            const likeForm = document.querySelector('.like-form');
            const dislikeForm = document.querySelector('.dislike-form');
            const likeButton = document.querySelector('.like-button');
            const dislikeButton = document.querySelector('.dislike-button');
            
            // Édition des commentaires in-line
            const editCommentButtons = document.querySelectorAll('.edit-comment-btn');
            if (editCommentButtons.length > 0) {
                console.log('Found', editCommentButtons.length, 'edit comment buttons');
                editCommentButtons.forEach(button => {
                    button.addEventListener('click', function(event) {
                        event.preventDefault();
                        
                        const commentId = this.dataset.commentId;
                        console.log('Edit clicked for comment ID:', commentId);
                        
                        // Trouver le conteneur de commentaire
                        const commentContainer = document.getElementById('comment-' + commentId);
                        if (!commentContainer) {
                            console.error('Comment container not found for ID:', commentId);
                            return;
                        }
                        
                        // Trouver la bulle de commentaire
                        const commentBubble = commentContainer.querySelector('.comment-bubble');
                        const commentText = commentBubble.querySelector('.comment-text').innerHTML;
                        
                        // Sauvegarder le contenu original
                        commentBubble.setAttribute('data-original-content', commentBubble.innerHTML);
                        
                        // Créer le formulaire d'édition
                        const formHtml = `
                            <div class="edit-comment-form">
                                <div class="form-group">
                                    <textarea class="form-control mb-2" rows="3" id="edit-comment-textarea-${commentId}">${commentText.trim()}</textarea>
                                </div>
                                <div class="d-flex">
                                    <button type="button" class="btn btn-primary btn-sm me-2 save-edit-btn" data-comment-id="${commentId}">Enregistrer</button>
                                    <button type="button" class="btn btn-secondary btn-sm cancel-edit-btn" data-comment-id="${commentId}">Annuler</button>
                                </div>
                            </div>
                        `;
                        
                        // Remplacer le contenu de la bulle par le formulaire
                        commentBubble.innerHTML = formHtml;
                        
                        // Focus sur le textarea
                        document.getElementById(`edit-comment-textarea-${commentId}`).focus();
                        
                        // Gérer l'annulation de l'édition
                        commentBubble.querySelector('.cancel-edit-btn').addEventListener('click', function() {
                            commentBubble.innerHTML = commentBubble.getAttribute('data-original-content');
                        });
                        
                        // Gérer la sauvegarde de l'édition
                        commentBubble.querySelector('.save-edit-btn').addEventListener('click', function() {
                            const newContent = document.getElementById(`edit-comment-textarea-${commentId}`).value;
                            if (newContent.trim() === '') {
                                showNotification('Le commentaire ne peut pas être vide', 'warning');
                                return;
                            }
                            
                            // Préparer les données
                            const formData = new FormData();
                            formData.append('description', newContent);
                            
                            // Envoyer la requête AJAX
                            fetch(`/commentaire/${commentId}/edit-ajax`, {
                            method: 'POST',
                                body: formData,
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                                }
                            })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error(`HTTP error! Status: ${response.status}`);
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (data.success) {
                                    // Mettre à jour le commentaire
                                    commentBubble.innerHTML = commentBubble.getAttribute('data-original-content');
                                    commentBubble.querySelector('.comment-text').innerHTML = data.description;
                                    
                                    // Afficher une notification de succès
                                    showNotification('Commentaire modifié avec succès', 'success');
                                } else {
                                    showNotification(data.error || 'Une erreur est survenue', 'danger');
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                showNotification('Erreur lors de la modification du commentaire', 'danger');
                                
                                // Restaurer le formulaire en cas d'erreur
                                commentBubble.innerHTML = commentBubble.getAttribute('data-original-content');
                            });
                        });
                    });
                });
            }
            
            // Vérifiez l'état initial des boutons (via une requête au serveur ou des données injectées)
            {% if app.session.get('user_post_actions')[social_media.idEB] is defined %}
                {% set userAction = app.session.get('user_post_actions')[social_media.idEB] %}
                {% if userAction == 'like' %}
                    likeButton.classList.add('active');
                    likeButton.innerHTML = `<img src="{{ asset('images/icons/like-button.png') }}" alt="J'aime" width="16" height="16" class="me-1"> <span class="action-text">J'aime</span>`;
                {% elseif userAction == 'dislike' %}
                    dislikeButton.classList.add('active');
                    dislikeButton.innerHTML = `<img src="{{ asset('images/icons/dislike-button.png') }}" alt="Je n'aime pas" width="16" height="16" class="me-1"> <span class="action-text">Je n'aime pas</span>`;
                {% endif %}
            {% endif %}
            
            // Add animation to comments when they come into view
            const commentEntries = document.querySelectorAll('.comment-entry');
            
            if (commentEntries.length > 0) {
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.style.opacity = "1";
                            observer.unobserve(entry.target);
                        }
                    });
                }, {
                    threshold: 0.1
                });
                
                // Set initial opacity to 0 for smooth animation
                commentEntries.forEach(entry => {
                    entry.style.opacity = "0";
                    observer.observe(entry);
                });
            }
            
            // Function to handle form submission
            function handleFormSubmit(form, action) {
                form.addEventListener('submit', function(event) {
                    event.preventDefault();
                    
                    const button = form.querySelector('button');
                    button.disabled = true;
                    
                    // Create FormData object
                    const formData = new FormData(form);
                    
                    // Get the action URL from the form
                    const url = form.getAttribute('action');
                    
                    // Create fetch request
                    fetch(url, {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        button.disabled = false;
                        
                        if (data.success) {
                            const oppositeButton = action === 'like' 
                                ? document.querySelector('.dislike-button')
                                : document.querySelector('.like-button');
                            
                            // Vérifier l'action retournée par le serveur
                            if (data.action === action) {
                                // L'action a été appliquée (ajout)
                                if (action === 'like') {
                                    button.innerHTML = `<img src="{{ asset('images/icons/like-button.png') }}" alt="J'aime" width="16" height="16" class="me-1"> <span class="action-text">J'aime</span>`;
                                } else {
                                    button.innerHTML = `<img src="{{ asset('images/icons/dislike-button.png') }}" alt="Je n'aime pas" width="16" height="16" class="me-1"> <span class="action-text">Je n'aime pas</span>`;
                                }
                                button.classList.add('active');
                                
                                // S'assurer que l'autre bouton est désactivé
                                oppositeButton.classList.remove('active');
                                oppositeButton.innerHTML = action === 'like'
                                    ? `<img src="{{ asset('images/icons/like-button.png') }}" alt="J'aime" width="16" height="16" class="me-1"> <span class="action-text">J'aime</span>`
                                    : `<img src="{{ asset('images/icons/dislike-button.png') }}" alt="Je n'aime pas" width="16" height="16" class="me-1"> <span class="action-text">Je n'aime pas</span>`;
                                
                            } else if (data.action === null) {
                                // L'action a été retirée (toggle off)
                                if (action === 'like') {
                                    button.innerHTML = `<img src="{{ asset('images/icons/like-button.png') }}" alt="J'aime" width="16" height="16" class="me-1"> <span class="action-text">J'aime</span>`;
                                } else {
                                    button.innerHTML = `<img src="{{ asset('images/icons/dislike-button.png') }}" alt="Je n'aime pas" width="16" height="16" class="me-1"> <span class="action-text">Je n'aime pas</span>`;
                                }
                                button.classList.remove('active');
                            } else {
                                // On a changé d'avis (like -> dislike ou dislike -> like)
                                if (data.action === 'like') {
                                    document.querySelector('.like-button').innerHTML = `<img src="{{ asset('images/icons/like-button.png') }}" alt="J'aime" width="16" height="16" class="me-1"> <span class="action-text">J'aime</span>`;
                                    document.querySelector('.like-button').classList.add('active');
                                    document.querySelector('.dislike-button').innerHTML = `<img src="{{ asset('images/icons/dislike-button.png') }}" alt="Je n'aime pas" width="16" height="16" class="me-1"> <span class="action-text">Je n'aime pas</span>`;
                                    document.querySelector('.dislike-button').classList.remove('active');
                                } else {
                                    document.querySelector('.dislike-button').innerHTML = `<img src="{{ asset('images/icons/dislike-button.png') }}" alt="Je n'aime pas" width="16" height="16" class="me-1"> <span class="action-text">Je n'aime pas</span>`;
                                    document.querySelector('.dislike-button').classList.add('active');
                                    document.querySelector('.like-button').innerHTML = `<img src="{{ asset('images/icons/like-button.png') }}" alt="J'aime" width="16" height="16" class="me-1"> <span class="action-text">J'aime</span>`;
                                    document.querySelector('.like-button').classList.remove('active');
                                }
                            }
                            
                            // Update stats
                            updateStats(data.likeCount, data.dislikeCount);
                            
                            // Add a subtle feedback animation
                            button.classList.add('pulsate');
                            setTimeout(() => {
                                button.classList.remove('pulsate');
                            }, 1000);
                            
                            // Show success notification
                            showNotification(data.message, 'success');
                        } else {
                            console.error('Action failed:', data.error);
                            // Show error notification
                            showNotification('Une erreur est survenue', 'danger');
                        }
                    })
                    .catch(error => {
                        button.disabled = false;
                        console.error('Error:', error);
                        showNotification('Erreur de connexion', 'danger');
                    });
                });
            }
            
            // Apply handlers
            if (likeForm) handleFormSubmit(likeForm, 'like');
            if (dislikeForm) handleFormSubmit(dislikeForm, 'dislike');
            
            // Function to update stats display
            function updateStats(likeCount, dislikeCount) {
                const statsElement = document.querySelector('.post-stats');
                if (statsElement) {
                    let html = '<div class="d-flex align-items-center gap-3">';
                    
                    if (likeCount > 0) {
                        html += `
                            <div class="d-flex align-items-center">
                                <span class="like-count-badge d-flex align-items-center justify-content-center rounded-pill">
                                    <img src="{{ asset('images/icons/like-button.png') }}" alt="J'aime" width="18" height="18" class="me-1">
                                    <span class="fw-medium text-white">${likeCount}</span>
                                </span>
                            </div>
                        `;
                    }
                    
                    if (likeCount > 0 && dislikeCount > 0) {
                        html += `<div class="stats-separator mx-1"></div>`;
                    }
                    
                    if (dislikeCount > 0) {
                        html += `
                            <div class="d-flex align-items-center">
                                <span class="dislike-count-badge d-flex align-items-center justify-content-center rounded-pill">
                                    <img src="{{ asset('images/icons/dislike-button.png') }}" alt="Je n'aime pas" width="18" height="18" class="me-1">
                                    <span class="fw-medium text-white">${dislikeCount}</span>
                                </span>
                            </div>
                        `;
                    }
                    
                    html += '</div>';
                    html += `
                        <div>
                            <small class="text-muted d-flex align-items-center">
                                <i class="bi bi-chat-dots me-1"></i>
                                <span class="comments-count">${document.querySelectorAll('.comment-entry').length}</span> 
                                commentaire${document.querySelectorAll('.comment-entry').length !== 1 ? 's' : ''}
                            </small>
                        </div>
                    `;
                    
                    // Create a flash effect on update
                    statsElement.classList.add('highlight');
                    statsElement.innerHTML = html;
                    
                    setTimeout(() => {
                        statsElement.classList.remove('highlight');
                    }, 1000);
                }
            }
            
            // Function to show notification
            function showNotification(message, type = 'info') {
                const notification = document.createElement('div');
                notification.className = `alert alert-${type} position-fixed start-50 translate-middle-x`;
                notification.style.top = '20px';
                notification.style.zIndex = '9999';
                notification.style.maxWidth = '90%';
                notification.style.width = '350px';
                notification.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
                notification.style.opacity = '0';
                notification.style.transform = 'translateY(-20px)';
                notification.style.transition = 'all 0.3s ease';
                notification.innerHTML = message;
                
                document.body.appendChild(notification);
                
                // Trigger animation
                setTimeout(() => {
                    notification.style.opacity = '1';
                    notification.style.transform = 'translateY(0)';
                }, 10);
                
                setTimeout(() => {
                    notification.style.opacity = '0';
                    notification.style.transform = 'translateY(-20px)';
                    
                    setTimeout(() => {
                        document.body.removeChild(notification);
                    }, 300);
                }, 3000);
            }
            
            // Smooth scroll for comment link
            const commentLink = document.querySelector('a[href="#comments-area"]');
            if (commentLink) {
                commentLink.addEventListener('click', function(e) {
                    e.preventDefault();
                    const commentsSection = document.getElementById('comments-area');
                    if (commentsSection) {
                        commentsSection.scrollIntoView({
                            behavior: 'smooth'
                        });
                    }
                });
            }

            // Ajouter le gestionnaire d'événement pour le formulaire de commentaire
            const commentForm = document.getElementById('comment-form');
            const commentInput = document.getElementById('comment-input');
            const commentsList = document.getElementById('comments-list');
            
            if (commentForm) {
                commentForm.addEventListener('submit', function(event) {
                    event.preventDefault();
                    
                    if (!commentInput.value.trim()) {
                        showNotification('Le commentaire ne peut pas être vide', 'warning');
                        return;
                    }
                    
                    const submitButton = document.getElementById('submit-comment');
                    submitButton.disabled = true;
                    
                    const formData = new FormData(commentForm);
                    
                    fetch(commentForm.getAttribute('action'), {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .catch(error => {
                        // En cas d'erreur de parsing JSON (comme une redirection), on traite comme un succès
                        // et on recharge la page
                        return { success: false, reload: true };
                    })
                    .then(data => {
                        submitButton.disabled = false;
                        
                        if (data.reload) {
                            // Si on ne peut pas traiter la réponse JSON, on recharge la page
                            window.location.reload();
                            return;
                        }
                        
                        if (data.success) {
                            // Vider le champ de saisie
                            commentInput.value = '';
                            
                            // Recharger juste la liste des commentaires
                            window.location.reload();
                            
                            // Afficher un message de succès
                            showNotification(data.message || 'Commentaire ajouté avec succès !', 'success');
                        } else {
                            showNotification(data.error || 'Erreur lors de l\'ajout du commentaire', 'danger');
                        }
                    })
                    .catch(error => {
                        submitButton.disabled = false;
                        console.error('Error:', error);
                        showNotification('Erreur de connexion', 'danger');
                    });
                });
            }

            // Ajouter le gestionnaire d'événement pour les likes de commentaires
            const commentLikeButtons = document.querySelectorAll('.comment-like-btn');
            
            if (commentLikeButtons.length > 0) {
                console.log('Found', commentLikeButtons.length, 'comment like buttons');
                
                commentLikeButtons.forEach(button => {
                    button.addEventListener('click', function(event) {
                        event.preventDefault();
                        
                        const commentId = this.dataset.commentId;
                        console.log('Like clicked for comment ID:', commentId);
                        
                        const likeForm = document.getElementById(`like-comment-form-${commentId}`);
                        
                        if (!likeForm) {
                            console.error(`Form not found for comment ID: ${commentId}`);
                            showNotification('Erreur: formulaire introuvable', 'danger');
                            return;
                        }
                        
                        const formData = new FormData(likeForm);
                        console.log('Submitting form to:', likeForm.getAttribute('action'));
                        
                        fetch(likeForm.getAttribute('action'), {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        })
                        .then(response => {
                            console.log('Response status:', response.status);
                            if (!response.ok) {
                                throw new Error(`HTTP error! Status: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log('Success data:', data);
                            if (data.success) {
                                // Mise à jour visuelle du bouton
                                if (data.isLiked) {
                                    this.classList.add('active', 'text-primary');
                                    this.querySelector('i').classList.replace('bi-heart', 'bi-heart-fill');
                                } else {
                                    this.classList.remove('active', 'text-primary');
                                    this.querySelector('i').classList.replace('bi-heart-fill', 'bi-heart');
                                }
                                
                                // Mise à jour du compteur de likes
                                let countSpan = this.querySelector('.comment-like-count');
                                if (data.likeCount > 0) {
                                    if (countSpan) {
                                        countSpan.textContent = data.likeCount;
                                    } else {
                                        countSpan = document.createElement('span');
                                        countSpan.className = 'comment-like-count';
                                        countSpan.textContent = data.likeCount;
                                        this.appendChild(countSpan);
                                    }
                                } else if (countSpan) {
                                    countSpan.remove();
                                }
                                
                                // Afficher un message de succès
                                showNotification(data.message, 'success');
                            } else {
                                console.error('Action failed:', data.error);
                                showNotification(data.error || 'Une erreur est survenue', 'danger');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            showNotification('Erreur de connexion avec le serveur: ' + error.message, 'danger');
                        });
                });
            });
            } else {
                console.log('No comment like buttons found on the page');
            }
        });
    </script>
{% endblock %}
