{% extends 'dashEntreprise/dashboardEntreprise.html.twig' %}

{% block title %}Offres - Airmess Dashboard{% endblock %}

{% block body %}
<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card mb-4">
        <div class="card-header pb-0 d-flex justify-content-between align-items-center">
          <h6>Gestion des Offres</h6>
          <div>
            <!-- Bouton pour voir les réservations -->
            <a href="{{ path('reservations_offres_page') }}" class="btn me-2" style="background: linear-gradient(135deg, #3C8CE7 0%, #00EAFF 100%); color: white; border: none; box-shadow: 0 10px 20px rgba(0, 234, 255, 0.2); transition: all 0.3s ease; border-radius: 8px; padding: 10px 16px; font-weight: 600; letter-spacing: 0.5px;">
              <i class="fas fa-calendar-check me-2"></i> Voir les Réservations
            </a>
            <!-- Bouton pour ouvrir le modal -->
            <button type="button" class="btn btn-primary">
              <a href="{{ path('app_offre_new') }}" style="color: white; text-decoration: none;">Nouvelle Offre</a>
            </button>
          </div>
        </div>
        
        <!-- Ajout de la barre de recherche et du filtrage -->
        <div class="px-4 pt-3">
          <div class="row">
            <div class="col-md-6">
              <div class="input-group mb-3">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" id="searchOffre" class="form-control" placeholder="Rechercher une offre..." aria-label="Rechercher">
              </div>
            </div>
            <div class="col-md-6">
              <div class="d-flex justify-content-md-end">
                <div class="dropdown">
                  <button class="btn btn-outline-primary dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-filter me-2"></i>Filtrer par
                  </button>
                  <ul class="dropdown-menu" aria-labelledby="filterDropdown">
                    <li><a class="dropdown-item filter-option" data-filter="all" href="#">Toutes les offres</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item filter-option" data-filter="status-confirmed" href="#">Confirmées</a></li>
                    <li><a class="dropdown-item filter-option" data-filter="status-rejected" href="#">Rejetées</a></li>
                    <li><a class="dropdown-item filter-option" data-filter="status-pending" href="#">En attente</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item filter-option" data-filter="active" href="#">Offres actives</a></li>
                    <li><a class="dropdown-item filter-option" data-filter="expired" href="#">Offres expirées</a></li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="card-body px-0 pt-0 pb-2">
          <div class="table-responsive p-4">
            <table class="table align-items-center mb-0">
              <thead>
                <tr>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Image</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Titre</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Lieu</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Prix Initial</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Prix Après Réduction</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Date de Début</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Date de Fin</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Nombre Limite</th>
                  
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Statut</th>
                  <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Actions</th>
                </tr>
              </thead>
              <tbody id="offresTableBody">
                {% for offre in offres %}
                  <tr class="offre-row" 
                      data-title="{{ offre.description|lower }}" 
                      data-place="{{ offre.place|lower }}" 
                      data-status="{{ offre.statusoff.value|lower }}"
                      data-active="{{ offre.endDate > date() ? 'active' : 'expired' }}">
                    <td class="p-2">
                      <div class="d-flex align-items-center justify-content-center">
                        <div style="width: 100px; height: 70px; overflow: hidden; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                          {% if offre.imagePath %}
                            <img src="{{ 'http://localhost/imageOffre/' ~ offre.imagePath }}" alt="Image de l'offre" 
                               style="width: 100%; height: 100%; object-fit: cover;">
                          {% else %}
                            <div class="d-flex align-items-center justify-content-center bg-light" style="width: 100%; height: 100%;">
                              <i class="fas fa-image text-secondary" style="font-size: 1.5rem;"></i>
                            </div>
                          {% endif %}
                        </div>
                      </div>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.description }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.place }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.priceInit }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.priceAfter }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.startDate ? offre.startDate|date('Y-m-d H:i:s') : '' }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.endDate ? offre.endDate|date('Y-m-d H:i:s') : '' }}</p>
                    </td>
                    <td>
                      <p class="text-xs font-weight-bold mb-0">{{ offre.numberLimit }}</p>
                    </td>
                    <td class="align-middle">
                      <span class="badge {% if offre.statusoff.value == 'Confirmé' %}bg-success{% elseif offre.statusoff.value == 'Rejeté' %}bg-danger{% else %}bg-warning{% endif %}">
                        {{ offre.statusoff.value }}
                      </span>
                    </td>
                    <td class="align-middle">
                      <!-- Bouton Modifier -->
                      <a href="{{ path('app_offre_edit', {'idO': offre.idO}) }}" class="btn btn-info btn-sm" title="Modifier" style="font-size: 0.75rem; padding: 0.25rem 0.5rem;">
                        Modifier
                      </a>

                      <!-- Bouton Supprimer -->
                      <form action="{{ path('app_offre_delete', {'idO': offre.idO}) }}" method="post" style="display: inline-block;">
                        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ offre.idO) }}">
                        <button type="submit" class="btn btn-danger btn-sm" title="Supprimer" style="font-size: 0.75rem; padding: 0.25rem 0.5rem;" onclick="return confirm('Êtes-vous sûr de vouloir supprimer cette offre ?');">
                          Supprimer
                        </button>
                      </form>
                    </td>
                  </tr>
                {% else %}
                  <tr>
                    <td colspan="10" class="text-center">Aucune offre trouvée.</td>
                  </tr>
                {% endfor %}
              </tbody>
            </table>
            
            <!-- Pagination -->
            <div class="d-flex justify-content-center mt-4" id="pagination-container">
              <nav aria-label="Navigation des offres">
                <ul class="pagination" id="pagination-offres">
                  <!-- Les boutons de pagination seront générés dynamiquement -->
                </ul>
              </nav>
            </div>
            
            <!-- Informations sur la pagination -->
            <div class="text-center mt-2">
              <span class="text-xs text-secondary">
                Affichage de <span id="start-index">1</span> à <span id="end-index">10</span> sur <span id="total-items">{{ offres|length }}</span> offres
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal pour la création d'une nouvelle offre -->
  <div class="modal fade" id="createOfferModal" tabindex="-1" aria-labelledby="createOfferModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="createOfferModalLabel">Créer une Nouvelle Offre</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          {{ form_start(form) }}
            {{ form_widget(form) }}
            <button type="submit" class="btn btn-primary">Créer</button>
          {{ form_end(form) }}
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Configuration de la pagination
    const itemsPerPage = 10;
    let currentPage = 1;
    let filteredRows = [];
    
    // Fonction de recherche
    const searchOffre = document.getElementById('searchOffre');
    if (searchOffre) {
      searchOffre.addEventListener('keyup', function() {
        const searchValue = this.value.toLowerCase();
        currentPage = 1;
        filterAndDisplayOffers(searchValue);
      });
    }
    
    // Filtrage par statut ou type
    const filterOptions = document.querySelectorAll('.filter-option');
    filterOptions.forEach(option => {
      option.addEventListener('click', function(e) {
        e.preventDefault();
        const filterValue = this.getAttribute('data-filter');
        currentPage = 1;
        applyFilter(filterValue);
        
        // Mise à jour du texte du bouton dropdown
        document.getElementById('filterDropdown').innerHTML = '<i class="fas fa-filter me-2"></i>' + this.textContent;
      });
    });
    
    // Fonction pour filtrer les offres
    function filterOffers(searchValue) {
      const rows = document.querySelectorAll('.offre-row');
      filteredRows = [];
      
      rows.forEach(row => {
        const title = row.getAttribute('data-title');
        const place = row.getAttribute('data-place');
        const shouldShow = title.includes(searchValue) || place.includes(searchValue);
        
        if (shouldShow) {
          filteredRows.push(row);
        }
        row.style.display = 'none';
      });
      
      displayPageItems();
      createPagination();
    }
    
    // Fonction pour filtrer et afficher les offres
    function filterAndDisplayOffers(searchValue) {
      filterOffers(searchValue);
      displayPageItems();
      createPagination();
    }
    
    // Fonction pour appliquer le filtre
    function applyFilter(filterValue) {
      const rows = document.querySelectorAll('.offre-row');
      filteredRows = [];
      
      rows.forEach(row => {
        let shouldShow = false;
        
        if (filterValue === 'all') {
          shouldShow = true;
        } else if (filterValue === 'status-confirmed') {
          shouldShow = row.getAttribute('data-status') === 'confirmé';
        } else if (filterValue === 'status-rejected') {
          shouldShow = row.getAttribute('data-status') === 'rejeté';
        } else if (filterValue === 'status-pending') {
          shouldShow = row.getAttribute('data-status') !== 'confirmé' && row.getAttribute('data-status') !== 'rejeté';
        } else if (filterValue === 'active' || filterValue === 'expired') {
          shouldShow = row.getAttribute('data-active') === filterValue;
        }
        
        if (shouldShow) {
          filteredRows.push(row);
        }
        row.style.display = 'none';
      });
      
      displayPageItems();
      createPagination();
    }
    
    // Fonction pour afficher les éléments de la page courante
    function displayPageItems() {
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, filteredRows.length);
      
      // Mise à jour des informations de pagination
      document.getElementById('start-index').textContent = filteredRows.length > 0 ? startIndex + 1 : 0;
      document.getElementById('end-index').textContent = endIndex;
      document.getElementById('total-items').textContent = filteredRows.length;
      
      // Afficher uniquement les éléments de la page courante
      filteredRows.forEach((row, index) => {
        if (index >= startIndex && index < endIndex) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }
    
    // Fonction pour créer la pagination
    function createPagination() {
      const paginationContainer = document.getElementById('pagination-offres');
      paginationContainer.innerHTML = '';
      
      const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
      
      // Bouton précédent
      const prevBtn = document.createElement('li');
      prevBtn.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
      prevBtn.innerHTML = '<a class="page-link" href="#" aria-label="Précédent"><span aria-hidden="true">&laquo;</span></a>';
      prevBtn.addEventListener('click', function(e) {
        e.preventDefault();
        if (currentPage > 1) {
          currentPage--;
          displayPageItems();
          createPagination();
        }
      });
      paginationContainer.appendChild(prevBtn);
      
      // Pages numérotées
      const maxPageButtons = 5;
      let startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
      let endPage = Math.min(totalPages, startPage + maxPageButtons - 1);
      
      if (endPage - startPage + 1 < maxPageButtons && startPage > 1) {
        startPage = Math.max(1, endPage - maxPageButtons + 1);
      }
      
      for (let i = startPage; i <= endPage; i++) {
        const pageBtn = document.createElement('li');
        pageBtn.className = `page-item ${i === currentPage ? 'active' : ''}`;
        pageBtn.innerHTML = `<a class="page-link" href="#">${i}</a>`;
        pageBtn.addEventListener('click', function(e) {
          e.preventDefault();
          currentPage = i;
          displayPageItems();
          createPagination();
        });
        paginationContainer.appendChild(pageBtn);
      }
      
      // Bouton suivant
      const nextBtn = document.createElement('li');
      nextBtn.className = `page-item ${currentPage === totalPages || totalPages === 0 ? 'disabled' : ''}`;
      nextBtn.innerHTML = '<a class="page-link" href="#" aria-label="Suivant"><span aria-hidden="true">&raquo;</span></a>';
      nextBtn.addEventListener('click', function(e) {
        e.preventDefault();
        if (currentPage < totalPages) {
          currentPage++;
          displayPageItems();
          createPagination();
        }
      });
      paginationContainer.appendChild(nextBtn);
      
      // Afficher ou masquer la pagination en fonction du nombre d'éléments
      const paginationParent = document.getElementById('pagination-container');
      paginationParent.style.display = totalPages <= 1 ? 'none' : 'flex';
    }
    
    // Initialisation de la pagination
    function initializePagination() {
      const rows = document.querySelectorAll('.offre-row');
      filteredRows = Array.from(rows);
      displayPageItems();
      createPagination();
    }
    
    // Initialiser la pagination au chargement
    initializePagination();
  });
</script>
{% endblock %}

