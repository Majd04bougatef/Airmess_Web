{% extends 'dashEntreprise/dashboardEntreprise.html.twig' %}

{% block title %}Modifier Profil Entreprise{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .password-strength {
            margin-top: 8px;
            height: 5px;
            background-color: #eee;
            position: relative;
            border-radius: 3px;
        }
        .password-strength-bar {
            height: 100%;
            border-radius: 3px;
            transition: width 0.3s ease, background-color 0.3s ease;
        }
        .invalid-feedback {
            display: none;
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        .was-validated .form-control:invalid ~ .invalid-feedback {
            display: block;
        }
        .password-strength-meter {
            width: 100%;
        }
        .password-strength-meter .progress {
            margin-bottom: 5px;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container-fluid py-4">
    <div id="alert-container">
        <!-- Alerts will be dynamically inserted here -->
    </div>
    
    <div class="card shadow mb-4">
        <div class="card-header pb-0 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold">Modifier le Profil Entreprise</h6>
        </div>
        <div class="card-body">
            <form id="profile-edit-form" method="post" action="{{ path('app_profile_update_ajax') }}" enctype="multipart/form-data">
                <div class="row">
                    <div class="col-md-4 text-center mb-4">
                        <div class="profile-image-container">
                            <div class="position-relative mx-auto" style="width: 200px;">
                                <div class="profile-image-wrapper rounded-circle border overflow-hidden" style="width: 200px; height: 200px;">
                                    {% if user.imagesU %}
                                        <img src="{{ path('app_profile_image', {'filename': user.imagesU}) }}" 
                                             alt="{{ user.name }}" id="profile-image-preview" class="img-fluid w-100 h-100" 
                                             style="object-fit: cover;"
                                             onerror="this.src='{{ asset('images/user-avatar.svg') }}'">
                                    {% else %}
                                        <img src="{{ asset('images/user-avatar.svg') }}" alt="Default profile" 
                                             id="profile-image-preview" class="img-fluid w-100 h-100" style="object-fit: cover;">
                                    {% endif %}
                                    
                                    <div class="overlay-controls position-absolute top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center" 
                                         style="background-color: rgba(0,0,0,0.5); opacity: 0; transition: opacity 0.3s ease;">
                                        <button type="button" id="change-photo-btn" class="btn btn-light btn-sm rounded-circle">
                                            <i class="fas fa-camera"></i>
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="mt-3">
                                    <input type="file" id="photo" name="photo" class="d-none" accept="image/jpeg,image/png,image/gif,image/webp">
                                    <div class="d-flex justify-content-center gap-2">
                                        <button type="button" id="upload-photo-btn" class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-upload me-1"></i> Télécharger Photo
                                        </button>
                                        <button type="button" id="remove-photo-btn" class="btn btn-sm btn-outline-danger" style="display: none;">
                                            <i class="fas fa-times me-1"></i> Supprimer
                                        </button>
                                    </div>
                                    <div id="photo-error" class="text-danger mt-2 small"></div>
                                    <div id="photo-info" class="text-muted mt-2 small">
                                        Formats acceptés: JPG, PNG, GIF, WEBP<br>
                                        Taille max: 5MB
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="name" class="form-label">Nom <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="name" name="name" value="{{ user.name }}" required>
                                <div class="invalid-feedback">Veuillez entrer le nom.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="prenom" class="form-label">Prénom <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="prenom" name="prenom" value="{{ user.prenom }}" required>
                                <div class="invalid-feedback">Veuillez entrer le prénom.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="email" class="form-label">Email <span class="text-danger">*</span></label>
                                <input type="email" class="form-control" id="email" name="email" value="{{ user.email }}" required>
                                <div class="invalid-feedback">Veuillez entrer une adresse email valide.</div>
                            </div>
                            <div class="col-md-6">
                                <label for="phone" class="form-label">Téléphone</label>
                                <input type="tel" class="form-control" id="phone" name="phone" value="{{ user.phoneNumber }}">
                                <div class="invalid-feedback">Veuillez entrer un numéro de téléphone valide.</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="row mt-4">
                    <div class="col-12 text-end">
                        <button type="submit" class="btn btn-success me-2" id="save-profile-btn">
                            <i class="fas fa-save me-1"></i> Enregistrer
                        </button>
                        <a href="{{ path('profileEntreprise_page') }}" class="btn btn-secondary me-2">
                            <i class="fas fa-arrow-left me-1"></i> Annuler
                        </a>
                        <button type="button" class="btn btn-danger" id="deleteProfileBtn">
                            <i class="fas fa-trash me-1"></i> Supprimer Profil
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light py-3">
            <h6 class="m-0 font-weight-bold text-primary">Mettre à jour le mot de passe</h6>
        </div>
        <div class="card-body">
            <div id="password-container"></div>
            
            <form id="passwordUpdateForm" action="{{ path('app_update_password_ajax') }}" method="post">
                <input type="hidden" name="_csrf_token" value="{{ csrf_token('password_update') }}">
                
                <div class="mb-3">
                    <label for="currentPassword" class="form-label">Mot de passe actuel</label>
                    <div class="input-group">
                        <input type="password" class="form-control" id="currentPassword" name="currentPassword" required>
                        <button class="btn btn-outline-secondary toggle-password" type="button" data-target="currentPassword">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
                
                <div class="mb-3">
                    <label for="newPassword" class="form-label">Nouveau mot de passe</label>
                    <div class="input-group">
                        <input type="password" class="form-control" id="newPassword" name="newPassword" required>
                        <button class="btn btn-outline-secondary toggle-password" type="button" data-target="newPassword">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                    <div class="mt-2">
                        <div class="progress" style="height: 5px;">
                            <div id="password-strength-meter" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <small id="password-strength-text" class="form-text text-muted"></small>
                    </div>
                    <small class="form-text text-muted">Le mot de passe doit contenir au moins 8 caractères, des lettres et des chiffres.</small>
                </div>
                
                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Confirmer le nouveau mot de passe</label>
                    <div class="input-group">
                        <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                        <button class="btn btn-outline-secondary toggle-password" type="button" data-target="confirmPassword">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
                
                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i> Enregistrer
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Profile Modal -->
<div class="modal fade" id="deleteProfileModal" tabindex="-1" aria-labelledby="deleteProfileModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="deleteProfileModalLabel">Confirmer la suppression</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Êtes-vous sûr de vouloir supprimer votre compte? Cette action aura les conséquences suivantes:</p>
        <ul>
          <li>Votre profil sera supprimé</li>
          <li>Vous serez déconnecté immédiatement</li>
          <li>Vous devrez contacter le support pour réactiver votre compte</li>
        </ul>
        <div class="form-check mb-3">
          <input class="form-check-input" type="checkbox" id="confirmDeactivation">
          <label class="form-check-label" for="confirmDeactivation">
            Je comprends que cette action ne peut pas être facilement annulée
          </label>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn" disabled>Supprimer le compte</button>
      </div>
    </div>
  </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const photoInput = document.getElementById('photo');
        const photoPreview = document.getElementById('profile-image-preview');
        const uploadPhotoBtn = document.getElementById('upload-photo-btn');
        const removePhotoBtn = document.getElementById('remove-photo-btn');
        const photoError = document.getElementById('photo-error');
        const profileImageWrapper = document.querySelector('.profile-image-wrapper');
        const overlay = document.querySelector('.overlay-controls');
        const changePhotoBtn = document.getElementById('change-photo-btn');
        
        // Form elements
        const form = document.getElementById('profile-edit-form');
        const saveBtn = document.getElementById('save-profile-btn');
        
        // Show overlay on hover
        profileImageWrapper.addEventListener('mouseenter', function() {
            overlay.style.opacity = '1';
        });
        
        profileImageWrapper.addEventListener('mouseleave', function() {
            overlay.style.opacity = '0';
        });
        
        // Handle image upload
        changePhotoBtn.addEventListener('click', function() {
            photoInput.click();
        });
        
        uploadPhotoBtn.addEventListener('click', function() {
            photoInput.click();
        });
        
        // Preview image immediately after selection
        photoInput.addEventListener('change', function(e) {
            photoError.textContent = '';
            
            if (this.files && this.files[0]) {
                const file = this.files[0];
                
                // Validate file size (5MB max)
                if (file.size > 5 * 1024 * 1024) {
                    photoError.textContent = 'Image trop grande ! Taille maximale 5MB.';
                    this.value = '';
                    return;
                }
                
                // Validate file type
                const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
                if (!validTypes.includes(file.type)) {
                    photoError.textContent = 'Type de fichier invalide. Utilisez JPG, PNG, GIF, ou WEBP.';
                    this.value = '';
                    return;
                }
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    photoPreview.src = e.target.result;
                    removePhotoBtn.style.display = 'block';
                }
                reader.readAsDataURL(file);
            }
        });
        
        // Handle remove photo button
        removePhotoBtn.addEventListener('click', function() {
            photoInput.value = '';
            photoPreview.src = "{{ asset('images/user-avatar.svg') }}";
            removePhotoBtn.style.display = 'none';
        });
        
        // Handle form submission with AJAX
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Basic validation
            const requiredFields = form.querySelectorAll('[required]');
            let isValid = true;
            
            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    field.classList.add('is-invalid');
                    isValid = false;
                } else {
                    field.classList.remove('is-invalid');
                }
            });
            
            // Validate email format
            const emailField = document.getElementById('email');
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (emailField.value && !emailRegex.test(emailField.value)) {
                emailField.classList.add('is-invalid');
                isValid = false;
            }
            
            if (!isValid) {
                // Scroll to first invalid field
                const firstInvalid = form.querySelector('.is-invalid');
                if (firstInvalid) {
                    firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    firstInvalid.focus();
                }
                return;
            }
            
            // Show loading state
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Enregistrement...';
            
            const formData = new FormData(this);
            
            fetch(this.action, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                // Reset button
                saveBtn.disabled = false;
                saveBtn.innerHTML = '<i class="fas fa-save me-1"></i> Enregistrer';
                
                if (data.success) {
                    showAlert('success', 'Profil mis à jour avec succès !');
                    
                    // Redirect after a short delay
                    setTimeout(() => {
                        window.location.href = "{{ path('profileEntreprise_page') }}";
                    }, 1500);
                } else {
                    showAlert('danger', data.message || 'Échec de la mise à jour du profil');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                saveBtn.disabled = false;
                saveBtn.innerHTML = '<i class="fas fa-save me-1"></i> Enregistrer';
                showAlert('danger', 'Erreur réseau lors de la mise à jour du profil');
            });
        });
        
        // Helper function to show alerts
        function showAlert(type, message) {
            const alertContainer = document.getElementById('alert-container');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.setAttribute('role', 'alert');
            alertDiv.innerHTML = message + 
                '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>';
            
            alertContainer.innerHTML = '';
            alertContainer.appendChild(alertDiv);
            
            // Scroll to alert
            window.scrollTo({ top: 0, behavior: 'smooth' });
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                const bsAlert = bootstrap.Alert.getInstance(alertDiv);
                if (bsAlert) {
                    bsAlert.close();
                } else {
                    alertDiv.remove();
                }
            }, 5000);
        }
        
        // Delete profile button handler
        document.getElementById('deleteProfileBtn').addEventListener('click', function() {
            // Show the confirmation modal
            const confirmModal = new bootstrap.Modal(document.getElementById('deleteProfileModal'));
            confirmModal.show();
        });
        
        // Handle checkbox for deactivation confirmation
        document.getElementById('confirmDeactivation').addEventListener('change', function() {
            document.getElementById('confirmDeleteBtn').disabled = !this.checked;
        });
        
        // Handle deactivation confirmation
        document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
            // Show loading state
            this.disabled = true;
            this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Traitement...';
            
            // Send deactivation request
            fetch('{{ path('deactivate_profile_ajax') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Hide the modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('deleteProfileModal'));
                    modal.hide();
                    
                    // Show success message
                    showAlert('info', '<strong>Compte supprimé!</strong> Votre compte a été supprimé avec succès. Vous serez redirigé vers la page de connexion.');
                    
                    // Redirect to login page after delay
                    setTimeout(() => {
                        window.location.href = "{{ path('app_logout') }}";
                    }, 3000);
                } else {
                    throw new Error(data.message || 'Une erreur est survenue lors de la suppression de votre compte.');
                }
            })
            .catch(error => {
                // Reset button
                this.disabled = false;
                this.innerHTML = 'Supprimer le compte';
                
                // Show error message
                showAlert('danger', error.message || 'Une erreur est survenue lors de la suppression de votre compte.');
            });
        });
        
        // Password toggle visibility
        document.querySelectorAll('.toggle-password').forEach(function(button) {
            button.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const passwordInput = document.getElementById(targetId);
                
                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    this.innerHTML = '<i class="fas fa-eye-slash"></i>';
                } else {
                    passwordInput.type = 'password';
                    this.innerHTML = '<i class="fas fa-eye"></i>';
                }
            });
        });
        
        // Password strength meter
        const passwordInput = document.getElementById('newPassword');
        const strengthMeter = document.getElementById('password-strength-meter');
        const strengthText = document.getElementById('password-strength-text');
        
        passwordInput.addEventListener('input', updateStrengthMeter);
        
        function updateStrengthMeter() {
            const password = passwordInput.value;
            let strength = 0;
            let feedback = '';
            
            // Check password length
            if (password.length >= 8) {
                strength += 25;
            }
            
            // Check for lowercase letters
            if (/[a-z]/.test(password)) {
                strength += 15;
            }
            
            // Check for uppercase letters
            if (/[A-Z]/.test(password)) {
                strength += 20;
            }
            
            // Check for numbers
            if (/\d/.test(password)) {
                strength += 20;
            }
            
            // Check for special characters
            if (/[^A-Za-z0-9]/.test(password)) {
                strength += 20;
            }
            
            // Update the strength meter
            strengthMeter.style.width = strength + '%';
            strengthMeter.setAttribute('aria-valuenow', strength);
            
            // Set the color based on strength
            if (strength < 30) {
                strengthMeter.className = 'progress-bar bg-danger';
                feedback = 'Faible';
            } else if (strength < 60) {
                strengthMeter.className = 'progress-bar bg-warning';
                feedback = 'Moyen';
            } else if (strength < 80) {
                strengthMeter.className = 'progress-bar bg-info';
                feedback = 'Fort';
            } else {
                strengthMeter.className = 'progress-bar bg-success';
                feedback = 'Très fort';
            }
            
            strengthText.textContent = feedback;
        }
        
        // Password update form submission
        const passwordForm = document.getElementById('passwordUpdateForm');
        const passwordContainer = document.getElementById('password-container');
        
        passwordForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Clear previous alerts
            passwordContainer.innerHTML = '';
            
            // Validate form
            let isValid = true;
            let errorMessages = [];
            
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (!currentPassword) {
                isValid = false;
                errorMessages.push('Le mot de passe actuel est requis');
            }
            
            if (!newPassword) {
                isValid = false;
                errorMessages.push('Le nouveau mot de passe est requis');
            } else if (newPassword.length < 8) {
                isValid = false;
                errorMessages.push('Le mot de passe doit contenir au moins 8 caractères');
            } else if (!/(?=.*[A-Za-z])(?=.*\d)/.test(newPassword)) {
                isValid = false;
                errorMessages.push('Le mot de passe doit contenir au moins une lettre et un chiffre');
            }
            
            if (newPassword !== confirmPassword) {
                isValid = false;
                errorMessages.push('Les mots de passe ne correspondent pas');
            }
            
            if (!isValid) {
                const alert = document.createElement('div');
                alert.className = 'alert alert-danger';
                alert.role = 'alert';
                alert.innerHTML = errorMessages.map(msg => `<div>${msg}</div>`).join('');
                passwordContainer.appendChild(alert);
                return;
            }
            
            // Show loading state
            const submitButton = passwordForm.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Traitement...';
            submitButton.disabled = true;
            
            // Submit form via AJAX
            fetch(passwordForm.action, {
                method: 'POST',
                body: new FormData(passwordForm),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Réponse réseau incorrecte');
                }
                return response.json();
            })
            .then(data => {
                // Reset form
                passwordForm.reset();
                
                // Show success message
                const alert = document.createElement('div');
                alert.className = 'alert alert-success alert-dismissible fade show';
                alert.role = 'alert';
                alert.innerHTML = `
                    <strong>Succès!</strong> Votre mot de passe a été mis à jour.
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                passwordContainer.appendChild(alert);
                
                // Auto dismiss after 5 seconds
                setTimeout(() => {
                    if (alert && alert.parentNode) {
                        alert.classList.remove('show');
                        setTimeout(() => alert.remove(), 300);
                    }
                }, 5000);
            })
            .catch(error => {
                console.error('Error:', error);
                
                // Show error message
                const alert = document.createElement('div');
                alert.className = 'alert alert-danger';
                alert.role = 'alert';
                alert.innerHTML = 'Une erreur est survenue lors de la mise à jour de votre mot de passe. Veuillez réessayer.';
                passwordContainer.appendChild(alert);
            })
            .finally(() => {
                // Reset button state
                submitButton.innerHTML = originalButtonText;
                submitButton.disabled = false;
            });
        });
    });
</script>
{% endblock %} 