{% extends 'dashVoyageurs/dashboardVoyageurs.html.twig' %}

{% block title %}Assistant AI - Airmess Dashboard{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    .chat-container {
        max-width: 800px;
        margin: 2rem auto;
        background: white;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .chat-header {
        padding: 1.5rem;
        border-bottom: 1px solid #eee;
        background: #f8f9fa;
        border-radius: 15px 15px 0 0;
    }

    .chat-box {
        height: 400px;
        overflow-y: auto;
        padding: 1.5rem;
        background-color: #fff;
    }

    .message {
        margin-bottom: 1rem;
        padding: 1rem;
        border-radius: 10px;
        white-space: pre-wrap;
    }

    .message.ai {
        background-color: #e3f2fd;
        margin-right: 20%;
    }

    .message.user {
        background-color: #f8f9fa;
        margin-left: 20%;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }

    .message.error {
        background-color: #ffebee;
        margin: 1rem 10%;
        border: 1px solid #ffcdd2;
    }
    
    /* Styles pour le formatage des réponses AI */
    .message.ai h3 {
        font-size: 18px;
        margin-top: 15px;
        margin-bottom: 8px;
        color: #1a73e8;
        border-bottom: 1px solid #e0e0e0;
        padding-bottom: 5px;
    }
    
    .message.ai strong {
        color: #333;
    }
    
    .message.ai em {
        font-style: italic;
        color: #555;
    }
    
    .message.ai br {
        display: block;
        margin: 5px 0;
        content: "";
    }

    .preferences-section {
        padding: 1.5rem;
        border-bottom: 1px solid #eee;
        background: #fff;
    }

    .preference-tag {
        display: inline-block;
        background: #f8f9fa;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        margin: 0.25rem;
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .preference-tag:hover {
        background: #e3f2fd;
        transform: translateY(-1px);
    }

    .input-section {
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 0 0 15px 15px;
    }

    .back-button {
        margin-bottom: 1rem;
    }

    #loading {
        display: none;
        text-align: center;
        padding: 1rem;
    }

    .btn-outline-primary {
        border-color: #5e72e4;
        color: #5e72e4;
    }

    .btn-outline-primary:hover {
        background-color: #5e72e4;
        color: white;
    }

    .input-group {
        background: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }

    .input-group input {
        border: none;
        padding: 0.75rem 1rem;
    }

    .input-group input:focus {
        box-shadow: none;
    }

    .input-group button {
        padding: 0.75rem 1.5rem;
        border: none;
    }
    
    .type-filters {
        margin: 1rem 0;
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }
    
    .type-pill {
        display: inline-block;
        padding: 8px 16px;
        border-radius: 20px;
        background: #f8f9fa;
        cursor: pointer;
        transition: all 0.2s ease;
        border: 1px solid #e9ecef;
        user-select: none;
    }
    
    .type-pill:hover {
        background-color: #e9ecef;
    }
    
    .type-pill.active {
        background-color: #5e72e4;
        color: white;
        font-weight: 500;
    }
</style>
{% endblock %}

{% block body %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <a href="{{ path('bonplanVoyageurs_page') }}" class="btn btn-secondary back-button">
                <i class="fas fa-arrow-left"></i> Retour aux bons plans
            </a>
            
            <div class="chat-container">
                <div class="chat-header">
                    <h4 class="mb-0"><i class="fas fa-robot me-2"></i>Assistant AI pour Bons Plans</h4>
                </div>

                <div class="chat-box" id="chatBox">
                    <div class="message ai">
                        Bonjour ! Je suis votre assistant AI pour les bons plans. Saisissez simplement un lieu, et je vous proposerai des suggestions !
                    </div>
                </div>

                <div id="loading">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Chargement...</span>
                    </div>
                </div>

                <div class="input-section">
                    <div class="input-group">
                        <input type="text" id="locationInput" class="form-control" placeholder="Entrez une ville ou un lieu..." />
                        <button class="btn btn-primary" id="searchBtn">
                            <i class="fas fa-search me-2"></i> Rechercher
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript de l'assistant IA -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoaded: Initialisation de l\'assistant...');
    
    // Sélection des éléments DOM
    const chatBox = document.getElementById('chatBox');
    const loading = document.getElementById('loading');
    const locationInput = document.getElementById('locationInput');
    const searchBtn = document.getElementById('searchBtn');
    
    // Fonction pour afficher les informations de débogage
    function showDebugInfo(info) {
        console.log('Debug:', info);
        // Ne plus afficher les informations de débogage dans l'interface
    }
    
    // Ajouter un message à la boîte de dialogue
    function appendMessage(message, isAi = false, isError = false) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isAi ? 'ai' : 'user'} ${isError ? 'error' : ''}`;
        
        // Si c'est un message AI, traiter le formatage Markdown
        if (isAi && !isError) {
            // Convertir le markdown simple en HTML
            let formattedMessage = message
                // Préserver les emojis
                .replace(/([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g, '<span class="emoji">$1</span>')
                // Titres
                .replace(/## (.*)/g, '<h3>$1</h3>')
                // Gras
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                // Italique
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                // Listes à puces
                .replace(/- (.*)/g, '<li>$1</li>')
                // Sauts de ligne
                .replace(/\n/g, '<br>');
            
            // Nettoyer et envelopper les listes
            formattedMessage = formattedMessage.replace(/<li>(.*?)<\/li>/g, function(match) {
                return '<ul>' + match + '</ul>';
            }).replace(/<\/ul><ul>/g, '');
            
            messageDiv.innerHTML = formattedMessage;
        } else {
            messageDiv.textContent = message;
        }
        
        chatBox.appendChild(messageDiv);
        chatBox.scrollTop = chatBox.scrollHeight;
        
        // Log la réponse pour debug
        if (isAi) {
            console.log("Réponse AI brute:", message);
        }
    }
    
    // Rechercher des suggestions
    async function getSuggestions() {
        const location = locationInput.value.trim();
        console.log('Recherche de suggestions pour:', location);
        
        if (!location) {
            appendMessage('Veuillez entrer un lieu pour la recherche.', false, true);
            return;
        }
        
        loading.style.display = 'block';
        appendMessage(`Recherche de suggestions pour ${location}...`, false);
        
        const requestData = {
            location: location,
            preferences: [],
            types: []
        };
        
        // Log uniquement dans la console, pas d'affichage visuel
        console.log('Recherche:', {
            action: 'recherche',
            données: requestData
        });
        
        try {
            const response = await fetch('{{ path('api_assistant_suggestions') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData)
            });
            
            if (!response.ok) {
                throw new Error(`Erreur HTTP: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('Réponse reçue:', data);
            
            if (data.error) {
                appendMessage(data.error, false, true);
            } else if (data.suggestions) {
                appendMessage(data.suggestions, true);
            } else {
                appendMessage("Désolé, je n'ai pas trouvé de suggestions pour le moment.", true);
            }
        } catch (error) {
            console.error('Erreur lors de la requête:', error);
            appendMessage(`Une erreur est survenue: ${error.message}`, false, true);
        } finally {
            loading.style.display = 'none';
        }
    }
    
    // Événements
    searchBtn.addEventListener('click', function(e) {
        e.preventDefault();
        getSuggestions();
    });
    
    locationInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            getSuggestions();
        }
    });
    
    // Test du système
    console.log('Vérification éléments:', 
        '\n- chatBox:', !!chatBox,
        '\n- locationInput:', !!locationInput,
        '\n- searchBtn:', !!searchBtn
    );
    
    // Log du statut initial uniquement dans la console
    console.log('Statut:', {
        status: 'Prêt',
        apiUrl: '{{ path('api_assistant_suggestions') }}'
    });
    
    console.log('Assistant initialisé');
});
</script>
{% endblock %}

{% block javascripts %}
{{ parent() }}
{% endblock %} 