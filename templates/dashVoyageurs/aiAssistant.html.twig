{% extends 'dashVoyageurs/dashboardVoyageurs.html.twig' %}

{% block title %}{{ title }}{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    .chat-container {
        height: calc(100vh - 200px);
        display: flex;
        flex-direction: column;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    .message {
        margin-bottom: 15px;
        padding: 10px 15px;
        border-radius: 10px;
        max-width: 80%;
    }

    .user-message {
        background-color: #e3f2fd;
        margin-left: auto;
    }

    .ai-message {
        background-color: #fff;
        margin-right: auto;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .input-container {
        display: flex;
        gap: 10px;
        padding: 20px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
    }

    .input-container textarea {
        flex: 1;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        padding: 10px;
        resize: none;
        height: 50px;
    }

    .input-container button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        background-color: #5e72e4;
        color: white;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .input-container button:hover {
        background-color: #4f46e5;
    }

    .ai-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #5e72e4;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        margin-right: 10px;
    }

    .message-content {
        display: flex;
        align-items: flex-start;
    }

    .message-text {
        flex: 1;
    }

    .typing-indicator {
        display: flex;
        gap: 5px;
        padding: 10px;
        background-color: #fff;
        border-radius: 10px;
        width: fit-content;
        margin-bottom: 15px;
    }

    .typing-dot {
        width: 8px;
        height: 8px;
        background-color: #5e72e4;
        border-radius: 50%;
        animation: typing 1s infinite;
    }

    .typing-dot:nth-child(2) {
        animation-delay: 0.2s;
    }

    .typing-dot:nth-child(3) {
        animation-delay: 0.4s;
    }

    @keyframes typing {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-5px); }
    }
</style>
{% endblock %}

{% block body %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Assistant AI</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="p-4">
                        <div class="chat-container">
                            <div class="chat-messages" id="chatMessages">
                                <div class="message ai-message">
                                    <div class="message-content">
                                        <div class="ai-avatar">
                                            <i class="fas fa-robot"></i>
                                        </div>
                                        <div class="message-text">
                                            Bonjour ! Je suis votre assistant AI. Comment puis-je vous aider aujourd'hui ?
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="input-container">
                                <textarea id="userInput" placeholder="Posez votre question ici..." rows="1"></textarea>
                                <button type="button" id="sendButton">
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
console.log('Test de chargement 1');
document.addEventListener('DOMContentLoaded', function() {
    console.log('Script chargé');

    const chatMessages = document.getElementById('chatMessages');
    const userInput = document.getElementById('userInput');
    const sendButton = document.getElementById('sendButton');

    console.log('Elements trouvés:', {
        chatMessages: !!chatMessages,
        userInput: !!userInput,
        sendButton: !!sendButton
    });

    function escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    function addUserMessage(message) {
        console.log('Ajout message utilisateur:', message);
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message user-message';
        messageDiv.innerHTML = `
            <div class="message-content">
                <div class="message-text">
                    ${escapeHtml(message)}
                </div>
            </div>
        `;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function addAiMessage(message) {
        console.log('Ajout message AI:', message);
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message ai-message';
        messageDiv.innerHTML = `
            <div class="message-content">
                <div class="ai-avatar">
                    <i class="fas fa-robot"></i>
                </div>
                <div class="message-text">
                    ${escapeHtml(message)}
                </div>
            </div>
        `;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function showTypingIndicator() {
        console.log('Affichage indicateur de frappe');
        const indicator = document.createElement('div');
        indicator.className = 'typing-indicator';
        indicator.innerHTML = `
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
        `;
        chatMessages.appendChild(indicator);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        return indicator;
    }

    async function sendMessage(message) {
        console.log('Tentative d\'envoi du message:', message);
        try {
            const url = '{{ path("ai_assistant_chat") }}';
            console.log('URL de la requête:', url);

            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ message: message })
            });

            console.log('Réponse reçue:', response);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('Données reçues:', data);
            return data;
        } catch (error) {
            console.error('Erreur lors de l\'envoi:', error);
            throw error;
        }
    }

    if (sendButton) {
        console.log('Attachement de l\'événement click au bouton');
        sendButton.onclick = async function(e) {
            console.log('Bouton cliqué');
            e.preventDefault();
            const message = userInput.value.trim();
            console.log('Message à envoyer:', message);
            if (message) {
                try {
                    addUserMessage(message);
                    userInput.value = '';
                    const typingIndicator = showTypingIndicator();

                    const data = await sendMessage(message);
                    typingIndicator.remove();
                    addAiMessage(data.response);
                } catch (error) {
                    console.error('Erreur:', error);
                    addAiMessage('Désolé, une erreur est survenue. Veuillez réessayer.');
                }
            }
        };
    } else {
        console.error('Le bouton d\'envoi n\'a pas été trouvé !');
    }

    if (userInput) {
        userInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                console.log('Touche Entrée pressée');
                e.preventDefault();
                sendButton.click();
            }
        });

        userInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });
    } else {
        console.error('Le champ de saisie n\'a pas été trouvé !');
    }
});
</script>
{% endblock %} 