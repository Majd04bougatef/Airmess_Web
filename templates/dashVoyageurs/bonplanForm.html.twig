{% block title %}Ajouter un bon plan - Airmess Dashboard{% endblock %}

{% block body %}
<div class="content-card content-section active" id="bonplan-section">
  <div class="form-header">
    <h2 class="form-title">Ajouter un nouveau bon plan</h2>
    <p class="form-subtitle">Complétez les informations ci-dessous pour créer un nouveau bon plan pour les voyageurs.</p>
  </div>

  <form action="{{ path('bonplan_add') }}" method="post" id="bonplan-form" enctype="multipart/form-data" class="needs-validation" novalidate>
    <!-- Basic Info Card -->
    <div class="form-card card-info">
      <div class="form-card-header">
        <i class="fas fa-info-circle form-card-icon"></i>
        <h3 class="form-card-title">Informations de base</h3>
      </div>
      <div class="form-card-body">
        <div class="form-row">
          <div class="form-col form-col-md-12">
            <div class="form-floating">
              <input type="text" class="form-control" id="nomplace" name="nomplace" placeholder=" ">
              <label for="nomplace">Nom du lieu</label>
              <div class="invalid-feedback">
                Le nom du lieu est requis et doit contenir entre 3 et 100 caractères.
              </div>
            </div>
          </div>
        </div>

        <div class="form-spacer"></div>
        
        <div class="form-group">
          <label for="map" class="form-label">Localisation (cliquez sur la carte pour sélectionner)</label>
          <div id="map" style="height: 400px; border-radius: 10px;"></div>
          <div class="form-spacer"></div>
          <div class="row">
            <div class="col-md-6">
              <div class="form-floating">
                <input type="text" class="form-control" id="searchLocation" placeholder=" ">
                <label for="searchLocation">Rechercher un lieu</label>
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-floating">
                <input type="text" class="form-control" id="localisation" name="localisation" placeholder=" " readonly>
                <label for="localisation">Coordonnées</label>
                <div class="invalid-feedback">
                  Veuillez sélectionner une localisation sur la carte.
                </div>
              </div>
              <small class="form-text text-muted">Format: latitude, longitude</small>
            </div>
          </div>
          
          <!-- Ajout de la section météo -->
          <div class="weather-info mt-3" id="weatherInfo" style="display: none;">
            <div class="card">
              <div class="card-body">
                <h5 class="card-title">Météo actuelle</h5>
                <div class="d-flex align-items-center">
                  <img src="" alt="Météo" id="weatherIcon" class="weather-icon me-2" style="width: 50px; height: 50px;">
                  <div>
                    <span class="temperature" id="temperature"></span>
                    <span class="weather-description" id="weatherDescription"></span>
                  </div>
                </div>
                <div class="weather-recommendation mt-2" id="weatherRecommendation"></div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="form-spacer"></div>
        
        <div class="form-floating">
          <textarea class="form-control" id="description" name="description" style="height: 120px" placeholder=" "></textarea>
          <label for="description">Description</label>
          <div class="invalid-feedback">
            La description est requise et doit contenir entre 10 et 500 caractères.
          </div>
        </div>
      </div>
    </div>
    
    <!-- Type Place Card -->
    <div class="form-card card-type">
      <div class="form-card-header">
        <i class="fas fa-map-marker-alt form-card-icon"></i>
        <h3 class="form-card-title">Type de lieu</h3>
      </div>
      <div class="form-card-body">
        <div class="form-row">
          <div class="form-col form-col-md-12">
            <div class="form-floating">
              <select class="form-select" id="typePlace" name="typePlace">
                <option selected disabled value="">Sélectionnez un type</option>
                <option value="resto">Restaurant</option>
                <option value="coworkingspace">Espace de coworking</option>
                <option value="cafe">Café</option>
                <option value="musée">Musée</option>
              </select>
              <label for="typePlace">Type de lieu</label>
              <div class="invalid-feedback">
                Veuillez sélectionner un type de lieu.
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Image Card -->
    <div class="form-card card-image">
      <div class="form-card-header">
        <i class="fas fa-image form-card-icon"></i>
        <h3 class="form-card-title">Image</h3>
      </div>
      <div class="form-card-body">
        <div class="form-row">
          <div class="form-col form-col-md-12">
            <div class="form-floating">
              <input type="file" class="form-control" id="imageBP" name="imageBP" placeholder=" " accept="image/jpeg,image/png">
              <label for="imageBP">Image du lieu (optionnelle)</label>
              <div class="invalid-feedback">
                Veuillez sélectionner une image valide (JPG ou PNG).
              </div>
            </div>
            <small class="form-text text-muted">Choisissez une image pour le bon plan (formats acceptés: JPG, PNG) - optionnel</small>
          </div>
        </div>
      </div>
    </div>

    <div class="form-actions">
      <a href="{{ path('bonplanVoyageurs_page') }}" class="form-btn-outline" id="cancel-bonplan">Annuler</a>
      <button type="submit" class="form-btn">Ajouter le bon plan</button>
    </div>
  </form>
</div>

<style>
  .form-card {
    background-color: white;
    border-radius: 20px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
    margin-bottom: 1.5rem;
    border: 1px solid #eaedf2;
    overflow: hidden;
    transition: all 0.3s ease;
    position: relative;
  }

  .form-card:hover {
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }
  
  .form-card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 5px;
    height: 100%;
    transition: all 0.3s ease;
  }
  
  .card-info::before {
    background-color: #5e72e4;
  }
  
  .card-type::before {
    background-color: #2dce89;
  }
  
  .card-image::before {
    background-color: #fb6340;
  }

  .form-card-header {
    display: flex;
    align-items: center;
    padding: 1.25rem 1.5rem;
    background-color: #f8fafc;
    border-bottom: 1px solid #eaedf2;
    position: relative;
    z-index: 1;
    overflow: hidden;
  }
  
  .form-card-header::after {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    width: 30%;
    background: linear-gradient(to right, rgba(255, 255, 255, 0), rgba(94, 114, 228, 0.1));
    z-index: -1;
  }
  
  .card-info .form-card-header::after {
    background: linear-gradient(to right, rgba(255, 255, 255, 0), rgba(94, 114, 228, 0.1));
  }
  
  .card-type .form-card-header::after {
    background: linear-gradient(to right, rgba(255, 255, 255, 0), rgba(45, 206, 137, 0.1));
  }
  
  .card-image .form-card-header::after {
    background: linear-gradient(to right, rgba(255, 255, 255, 0), rgba(251, 99, 64, 0.1));
  }

  .form-card-icon {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    border-radius: 10px;
    margin-right: 1rem;
    padding: 0.5rem;
  }
  
  .card-info .form-card-icon {
    background-color: #5e72e4;
  }
  
  .card-type .form-card-icon {
    background-color: #2dce89;
  }
  
  .card-image .form-card-icon {
    background-color: #fb6340;
  }
  
  .form-card-title {
    margin: 0;
    font-size: 1.125rem;
    font-weight: 600;
    color: #344767;
  }
  
  .form-card-body {
    padding: 1.5rem;
  }
  
  .form-spacer {
    height: 1.5rem;
  }
  
  .form-floating {
    position: relative;
  }
  
  .form-floating label {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    padding: 1rem;
    pointer-events: none;
    transform-origin: 0 0;
    transition: opacity .1s ease-in-out,transform .1s ease-in-out;
    color: #67748e;
    font-size: 0.875rem;
  }
  
  .form-floating .form-control:focus ~ label,
  .form-floating .form-control:not(:placeholder-shown) ~ label {
    transform: scale(.85) translateY(-.5rem) translateX(.15rem);
    background-color: white;
    padding: 0 0.5rem;
    height: auto;
    color: #5e72e4;
  }
  
  .form-control, .form-select {
    display: block;
    width: 100%;
    padding: 0.75rem 1rem;
    font-size: 0.875rem;
    font-weight: 400;
    line-height: 1.5;
    color: #344767;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid #d2d6da;
    border-radius: 0.5rem;
    transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
  }
  
  .form-control:focus, .form-select:focus {
    color: #344767;
    background-color: #fff;
    border-color: #5e72e4;
    outline: 0;
    box-shadow: 0 3px 9px rgba(50, 50, 9, 0), 3px 4px 8px rgba(94, 114, 228, 0.1);
  }
  
  .form-control.is-invalid, .form-select.is-invalid {
    border-color: #f5365c;
    padding-right: calc(1.5em + 0.75rem);
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23f5365c'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23f5365c' stroke='none'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
  }
  
  .invalid-feedback {
    display: none;
    width: 100%;
    margin-top: 0.25rem;
    font-size: 0.875em;
    color: #f5365c;
  }
  
  .form-control.is-invalid ~ .invalid-feedback,
  .form-select.is-invalid ~ .invalid-feedback {
    display: block;
  }
  
  .form-text {
    margin-top: 0.25rem;
    font-size: 0.875em;
    color: #6c757d;
  }

  .weather-info {
    background-color: rgba(0, 0, 0, 0.03);
    border-radius: 8px;
    padding: 8px;
  }
  
  .weather-icon {
    width: 50px;
    height: 50px;
  }
  
  .temperature {
    font-size: 1.2rem;
    font-weight: 600;
    color: #344767;
  }
  
  .weather-description {
    font-size: 0.9rem;
    color: #67748e;
    margin-left: 8px;
  }
  
  .weather-recommendation .badge {
    font-size: 0.8rem;
    padding: 0.4rem 0.8rem;
  }
</style>

<!-- Ajout des CSS Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialiser la carte
  var map = L.map('map').setView([46.603354, 1.888334], 5); // Centrer sur la France

  // Ajouter la couche de tuiles OpenStreetMap
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);

  // Variable pour stocker le marqueur
  var marker;

  // Fonction pour ajouter un marqueur
  function addMarker(latlng) {
    // Supprimer le marqueur existant s'il y en a un
    if (marker) {
      map.removeLayer(marker);
    }
    
    // Ajouter un nouveau marqueur
    marker = L.marker(latlng, {
      draggable: true // Permettre de déplacer le marqueur
    }).addTo(map);
    
    // Mettre à jour les coordonnées lorsque le marqueur est déplacé
    marker.on('dragend', function(event) {
      var position = marker.getLatLng();
      updateCoordinates(position);
    });
    
    updateCoordinates(latlng);
  }
  
  // Fonction pour mettre à jour les coordonnées
  function updateCoordinates(latlng) {
    document.getElementById('localisation').value = latlng.lat.toFixed(6) + ', ' + latlng.lng.toFixed(6);
    validateField('localisation');
    // Appeler la fonction pour mettre à jour la météo
    updateWeather(latlng.lat, latlng.lng);
  }
  
  // Fonction pour mettre à jour la météo
  function updateWeather(lat, lon) {
    fetch(`/api/weather?lat=${lat}&lon=${lon}`)
      .then(response => response.json())
      .then(data => {
        const weatherInfo = document.getElementById('weatherInfo');
        const weatherIcon = document.getElementById('weatherIcon');
        const temperature = document.getElementById('temperature');
        const weatherDescription = document.getElementById('weatherDescription');
        const weatherRecommendation = document.getElementById('weatherRecommendation');

        try {
          weatherInfo.style.display = 'block';
          
          // Vérifier si les données sont disponibles
          if (data && data.weather && data.weather[0] && data.main) {
            weatherIcon.src = `https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`;
            temperature.textContent = `${Math.round(data.main.temp)}°C`;
            weatherDescription.textContent = data.weather[0].description;

            // Ajouter la recommandation météo
            let recommendationClass = '';
            let recommendationText = '';
            switch(data.recommendation) {
              case 'good':
                recommendationClass = 'bg-success';
                recommendationText = 'Idéal pour cette activité';
                break;
              case 'cold':
                recommendationClass = 'bg-info';
                recommendationText = 'Temps froid';
                break;
              case 'hot':
                recommendationClass = 'bg-warning';
                recommendationText = 'Temps chaud';
                break;
              case 'rainy':
                recommendationClass = 'bg-primary';
                recommendationText = 'Pluvieux';
                break;
              case 'snowy':
                recommendationClass = 'bg-secondary';
                recommendationText = 'Neigeux';
                break;
              default:
                recommendationClass = 'bg-secondary';
                recommendationText = 'Information non disponible';
            }
            weatherRecommendation.innerHTML = `<span class="badge ${recommendationClass}"><i class="fas fa-info-circle me-1"></i> ${recommendationText}</span>`;
          } else {
            // Afficher un message par défaut si les données ne sont pas disponibles
            weatherIcon.src = `https://openweathermap.org/img/wn/01d@2x.png`;
            temperature.textContent = `20°C`;
            weatherDescription.textContent = 'Données non disponibles';
            weatherRecommendation.innerHTML = `<span class="badge bg-secondary"><i class="fas fa-info-circle me-1"></i> Information non disponible</span>`;
          }
        } catch (error) {
          console.error('Erreur lors du traitement des données météo:', error);
          weatherInfo.style.display = 'none';
        }
      })
      .catch(error => {
        console.error('Erreur lors de la récupération de la météo:', error);
        document.getElementById('weatherInfo').style.display = 'none';
      });
  }
  
  // Ajouter un marqueur lorsqu'on clique sur la carte
  map.on('click', function(e) {
    addMarker(e.latlng);
  });
  
  // Ajouter un géocodeur pour la recherche d'adresses
  var geocoder = L.Control.geocoder({
    defaultMarkGeocode: false
  }).addTo(map);
  
  geocoder.on('markgeocode', function(e) {
    var latlng = e.geocode.center;
    map.setView(latlng, 13);
    addMarker(latlng);
  });
  
  // Utiliser la barre de recherche personnalisée
  var searchInput = document.getElementById('searchLocation');
  searchInput.addEventListener('keydown', function(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      var query = this.value;
      if (query) {
        geocoder.options.geocoder.geocode(query, function(results) {
          if (results.length > 0) {
            var latlng = results[0].center;
            map.setView(latlng, 13);
            addMarker(latlng);
          }
        });
      }
    }
  });

  // Fonction de validation personnalisée
  function validateField(fieldId) {
    const field = document.getElementById(fieldId);
    let isValid = true;
    let errorMessage = '';

    switch(fieldId) {
      case 'nomplace':
        if (!field.value.trim()) {
          isValid = false;
          errorMessage = 'Le nom du lieu est requis';
        } else if (field.value.length < 3 || field.value.length > 100) {
          isValid = false;
          errorMessage = 'Le nom du lieu doit contenir entre 3 et 100 caractères';
        }
        break;
      case 'searchLocation':
        if (field.value.trim() && field.value.length < 3) {
          isValid = false;
          errorMessage = 'La recherche doit contenir au moins 3 caractères';
        }
        break;
      case 'localisation':
        if (!field.value.trim()) {
          isValid = false;
          errorMessage = 'Veuillez sélectionner une localisation sur la carte';
        } else {
          // Vérifier le format des coordonnées
          const coords = field.value.split(',');
          if (coords.length !== 2 || isNaN(coords[0]) || isNaN(coords[1])) {
            isValid = false;
            errorMessage = 'Format de coordonnées invalide';
          }
        }
        break;
      case 'description':
        if (!field.value.trim()) {
          isValid = false;
          errorMessage = 'La description est requise';
        } else if (field.value.length < 10 || field.value.length > 500) {
          isValid = false;
          errorMessage = 'La description doit contenir entre 10 et 500 caractères';
        }
        break;
      case 'typePlace':
        if (!field.value) {
          isValid = false;
          errorMessage = 'Veuillez sélectionner un type de lieu';
        } else {
          const allowedTypes = ['resto', 'coworkingspace', 'cafe', 'musée'];
          if (!allowedTypes.includes(field.value)) {
            isValid = false;
            errorMessage = 'Type de lieu invalide';
          }
        }
        break;
      case 'imageBP':
        if (field.files && field.files.length > 0) {
          const file = field.files[0];
          // Vérifier le type de fichier
          if (!file.type.match('image/jpeg') && !file.type.match('image/png')) {
            isValid = false;
            errorMessage = 'Format d\'image non supporté. Utilisez JPG ou PNG';
          }
          // Vérifier la taille du fichier (max 5MB)
          else if (file.size > 5 * 1024 * 1024) {
            isValid = false;
            errorMessage = 'L\'image ne doit pas dépasser 5MB';
          }
        }
        break;
    }

    if (isValid) {
      field.classList.remove('is-invalid');
      field.classList.add('is-valid');
    } else {
      field.classList.remove('is-valid');
      field.classList.add('is-invalid');
      field.nextElementSibling.textContent = errorMessage;
    }

    return isValid;
  }

  // Fonction pour valider tous les champs obligatoires
  function validateAllRequiredFields() {
    const requiredFields = ['nomplace', 'localisation', 'description', 'typePlace'];
    let allValid = true;
    
    requiredFields.forEach(fieldId => {
      const field = document.getElementById(fieldId);
      if (!field.value.trim()) {
        field.classList.add('is-invalid');
        field.classList.remove('is-valid');
        allValid = false;
      }
    });
    
    return allValid;
  }

  // Form validation
  const form = document.getElementById('bonplan-form');
  
  if (form) {
    // Validation en temps réel
    const inputs = form.querySelectorAll('input, select, textarea');
    inputs.forEach(input => {
      // Validation lors de la saisie
      input.addEventListener('input', function() {
        validateField(this.id);
      });
      
      // Validation lors de la perte de focus
      input.addEventListener('blur', function() {
        validateField(this.id);
      });
      
      // Validation lors du changement de valeur (pour les select)
      input.addEventListener('change', function() {
        validateField(this.id);
      });
    });

    // Validation à la soumission
    form.addEventListener('submit', function(event) {
      event.preventDefault();
      
      // Valider d'abord tous les champs obligatoires
      const requiredFieldsValid = validateAllRequiredFields();
      
      // Ensuite valider les autres contraintes
      let allValid = requiredFieldsValid;
      let firstInvalidField = null;
      
      inputs.forEach(input => {
        if (!validateField(input.id)) {
          allValid = false;
          if (!firstInvalidField) {
            firstInvalidField = input;
          }
        }
      });

      if (allValid) {
        // Create FormData object to handle file uploads
        const formData = new FormData(form);
        
        // Submit form using fetch API
        fetch('{{ path('bonplan_add') }}', {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert('Bon plan ajouté avec succès!');
            // Redirect to the bons plans list page
            window.location.href = '{{ path('bonplanVoyageurs_page') }}';
          } else {
            alert('Erreur: ' + data.message);
          }
        })
        .catch(error => {
          console.error('Erreur:', error);
          alert('Une erreur est survenue lors de l\'ajout du bon plan.');
        });
      } else {
        // Faire défiler jusqu'au premier champ invalide
        if (firstInvalidField) {
          firstInvalidField.scrollIntoView({ behavior: 'smooth', block: 'center' });
          firstInvalidField.focus();
        }
      }
    });
  }
});
</script>
{% endblock %} 