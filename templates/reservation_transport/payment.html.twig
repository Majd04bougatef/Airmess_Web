{% extends 'dashVoyageurs/dashboardVoyageurs.html.twig' %}

{% block title %}Paiement de réservation{% endblock %}

{% block body %}
<style>
    /* Contact Form Card */
    .contact-form {
        background: #fff;
        margin: 0 auto;
        width: 100%;
        border-radius: 15px;
        box-shadow: none;
        overflow: hidden;
        padding-bottom: 30px;
    }
    
    /* Form Header */
    .contact-form h3 {
        margin: 25px 0;
        padding-bottom: 15px;
        text-align: center;
        color: #344767;
        font-weight: 600;
        position: relative;
        font-size: 28px;
    }
    
    .contact-form h3:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 80px;
        height: 3px;
        background: #5e72e4;
    }
    
    /* Logo Image */
    .contact-image {
        text-align: center;
        padding-top: 20px;
    }
    
    .contact-image img {
        width: 80px;
        margin-top: -40px;
        border-radius: 50%;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        background-color: white;
        padding: 8px;
    }
    
    /* Stepper Component */
    .stepper {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        max-width: 600px;
        margin: 30px auto;
        padding: 0;
        position: relative;
    }
    
    /* Line that connects steps */
    .stepper::before {
        content: '';
        position: absolute;
        width: 80%;
        height: 4px;
        background-color: #e9ecef;
        top: 18px;
        left: 10%;
        z-index: 0;
    }
    
    .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        flex: 1;
        z-index: 1;
    }
    
    .step-number {
        width: 36px;
        height: 36px;
        background-color: #e9ecef;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
        color: white;
        position: relative;
        z-index: 1;
        border: 3px solid white;
        transition: all 0.3s ease;
    }
    
    /* Active and completed step styling */
    .step.active .step-number {
        background-color: #5e72e4;
        transform: scale(1.1);
        box-shadow: 0 3px 10px rgba(94, 114, 228, 0.3);
    }
    
    .step.completed .step-number {
        background-color: #5e72e4;
    }
    
    .step-text {
        margin-top: 10px;
        font-size: 14px;
        font-weight: 600;
        color: #67748e;
        text-align: center;
        transition: all 0.3s ease;
    }
    
    .step.active .step-text {
        color: #344767;
    }
    
    .step.completed .step-text {
        color: #344767;
    }
    
    /* Payment specific styles */
    .payment-form {
        padding: 20px 40px;
    }
    
    .payment-card {
        border: 1px solid #e9ecef;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
    }
    
    .card-header {
        border-bottom: 1px solid #e9ecef;
        padding-bottom: 15px;
        margin-bottom: 20px;
        font-weight: 600;
        color: #344767;
    }
    
    .form-check {
        margin-bottom: 15px;
    }
    
    .payment-details {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 20px;
    }
    
    .recap-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px dashed #e9ecef;
    }
    
    .recap-label {
        font-weight: 600;
        color: #344767;
    }
    
    .recap-value {
        font-weight: 500;
        color: #67748e;
    }
    
    /* Button Styles */
    .btnn {
        width: 100%;
        border-radius: 7px;
        padding: 12px;
        color: #fff;
        background-color: #5e72e4;
        border: none;
        cursor: pointer;
        font-weight: 600;
        letter-spacing: 0.5px;
        transition: all 0.3s ease;
        margin-top: 15px;
        font-size: 16px;
        text-transform: uppercase;
    }
    
    .btnn:hover {
        background-color: #324cdd;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(94, 114, 228, 0.4);
    }
    
    .button-group {
        display: flex;
        gap: 15px;
        margin-top: 30px;
    }
    
    .btn-back {
        background-color: #67748e;
        flex: 1;
    }
    
    .btn-confirm {
        background-color: #5e72e4;
        flex: 2;
    }
    
    /* Stripe Elements specific styles */
    .StripeElement {
        box-sizing: border-box;
        height: 40px;
        padding: 10px 12px;
        border: 1px solid #e9ecef;
        border-radius: 4px;
        background-color: white;
        box-shadow: 0 1px 3px 0 #e6ebf1;
        transition: box-shadow 150ms ease;
    }

    .StripeElement--focus {
        box-shadow: 0 1px 3px 0 #cfd7df;
    }

    .StripeElement--invalid {
        border-color: #fa755a;
    }

    .StripeElement--webkit-autofill {
        background-color: #fefde5 !important;
    }

    #card-errors {
        color: #fa755a;
        margin-top: 10px;
        font-size: 14px;
    }

    /* Add error message styling */
    .error-message {
        color: #dc3545;
        padding: 10px;
        margin: 10px 0;
        border: 1px solid #dc3545;
        border-radius: 4px;
        background-color: #f8d7da;
    }
</style>

<div class="container contact-form">
    <div class="contact-image">
        <img src="{{asset('images/signalisation (2).png')}}" alt="bike_icon"/>
    </div>
    <h3>Paiement de votre réservation</h3>

    {% for message in app.flashes('error') %}
        <div class="error-message">
            {{ message }}
        </div>
    {% endfor %}

    <div class="stepper">
        <div class="step completed">
            <div class="step-number">1</div>
            <div class="step-text">Réservation</div>
        </div>
        <div class="step completed">
            <div class="step-number">2</div>
            <div class="step-text">Récap</div>
        </div>
        <div class="step active">
            <div class="step-number">3</div>
            <div class="step-text">Paiement</div>
        </div>
        <div class="step">
            <div class="step-number">4</div>
            <div class="step-text">Confirmation</div>
        </div>
    </div>

    <div class="payment-form">
        <div class="payment-details">
            <div class="recap-item">
                <div class="recap-label">Référence</div>
                <div class="recap-value">{{ reservation.reference }}</div>
            </div>
            <div class="recap-item">
                <div class="recap-label">Montant à payer</div>
                <div class="recap-value">{{ reservation.prix }}€</div>
            </div>
        </div>
        
        <form method="post" action="{{ path('app_reservation_transport_process_payment') }}" id="payment-form">
            <div class="payment-card">
                <div class="card-header">Informations de paiement</div>
                
                <div class="form-group">
                    <label for="card-element">Carte bancaire</label>
                    <div id="card-element"></div>
                    <div id="card-errors" role="alert"></div>
                </div>
            </div>
            
            <div class="button-group">
                <a href="{{ path('app_reservation_transport_station') }}" class="btnn btn-back">Retour</a>
                <button type="submit" class="btnn btn-confirm">Payer maintenant</button>
            </div>
            
            <!-- Hidden fields to pass reservation data -->
            <input type="hidden" name="user_id" value="{{ reservation.user.idU }}">
            <input type="hidden" name="station_id" value="{{ reservation.station.idS }}">
            <input type="hidden" name="date_res" value="{{ reservation.dateRes|date('Y-m-d H:i:s') }}">
            <input type="hidden" name="date_fin" value="{{ reservation.dateFin|date('Y-m-d H:i:s') }}">
            <input type="hidden" name="nombre_velo" value="{{ reservation.nombreVelo }}">
            <input type="hidden" name="prix" value="{{ reservation.prix }}">
        </form>
    </div>
</div>

<script src="https://js.stripe.com/v3/"></script>
<script>
    // Create a Stripe client
    const stripe = Stripe('{{ stripe_public_key }}');
    const elements = stripe.elements();

    // Create an instance of the card Element
    const card = elements.create('card', {
        style: {
            base: {
                color: '#32325d',
                fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                fontSmoothing: 'antialiased',
                fontSize: '16px',
                '::placeholder': {
                    color: '#aab7c4'
                }
            },
            invalid: {
                color: '#fa755a',
                iconColor: '#fa755a'
            }
        }
    });

    // Add an instance of the card Element into the `card-element` div
    card.mount('#card-element');

    // Handle real-time validation errors from the card Element
    card.addEventListener('change', function(event) {
        const displayError = document.getElementById('card-errors');
        if (event.error) {
            displayError.textContent = event.error.message;
        } else {
            displayError.textContent = '';
        }
    });

    // Handle form submission
    const form = document.getElementById('payment-form');
    form.addEventListener('submit', function(event) {
        event.preventDefault();

        // Show loading state
        const submitButton = form.querySelector('button[type="submit"]');
        submitButton.disabled = true;
        submitButton.textContent = 'Traitement en cours...';

        stripe.createToken(card).then(function(result) {
            if (result.error) {
                // Inform the user if there was an error
                const errorElement = document.getElementById('card-errors');
                errorElement.textContent = result.error.message;
                submitButton.disabled = false;
                submitButton.textContent = 'Payer maintenant';
            } else {
                // Send the token to your server
                stripeTokenHandler(result.token);
            }
        });
    });

    // Submit the form with the token ID
    function stripeTokenHandler(token) {
        // Insert the token ID into the form so it gets submitted to the server
        const form = document.getElementById('payment-form');
        const hiddenInput = document.createElement('input');
        hiddenInput.setAttribute('type', 'hidden');
        hiddenInput.setAttribute('name', 'stripeToken');
        hiddenInput.setAttribute('value', token.id);
        form.appendChild(hiddenInput);

        // Submit the form
        form.submit();
    }
</script>
{% endblock %}