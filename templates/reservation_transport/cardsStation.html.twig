{% extends 'dashVoyageurs/dashboardVoyageurs.html.twig' %}

{% block title %}Réserver un vélo{% endblock %}

{% block body %}
<meta name="csrf-token" content="{{ csrf_token('rate-station') }}">
<style>
    .station-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        padding: 1rem 0;
    }

    .station-card {
        position: relative;
        background: white;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 8px 24px rgba(149, 157, 165, 0.2);
        transition: all 0.3s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .current-rating {
        position: absolute;
        top: 10px;
        left: 10px;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 0.9rem;
        z-index: 2;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .current-rating i {
        color: #ffca28;
    }

    .current-rating small {
        opacity: 0.8;
        font-size: 0.8rem;
    }

    .station-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 30px rgba(94, 114, 228, 0.15);
    }

    .station-image {
        height: 160px;
        width: 100%;
        object-fit: cover;
        background-color: #f0f7ff;
    }

    .station-content {
        padding: 1.25rem;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .station-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #344767;
        margin-bottom: 0.5rem;
    }

    .station-detail {
        display: flex;
        align-items: center;
        margin-bottom: 0.75rem;
        color: #67748e;
    }

    .station-detail i {
        margin-right: 10px;
        color: #5e72e4;
    }

    .station-rating {
        margin: 1rem 0;
    }

    .rating-stars {
        display: flex;
        justify-content: center;
        gap: 5px;
    }

    .rating-stars i {
        font-size: 1.2rem;
        color: #d3d3d3;
        cursor: pointer;
        transition: color 0.2s ease;
    }

    .rating-stars i.filled {
        color: #ffca28;
    }

    .station-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 1.25rem;
        background-color: #f8f9fa;
        border-top: 1px solid #eaecf0;
        margin-top: auto;
    }

    .station-velos {
        display: flex;
        align-items: center;
        font-weight: 600;
        color: #344767;
    }
    
    .station-velos i {
        margin-right: 8px;
        color: #5e72e4;
    }

    .btn-reserve {
        background-color: #5e72e4;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 7px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
    }

    .btn-reserve:hover {
        background-color: #324cdd;
        transform: translateY(-2px);
        box-shadow: 0 3px 10px rgba(94, 114, 228, 0.3);
    }

    .btn-reserve i {
        margin-right: 8px;
    }

    .page-header {
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e9ecef;
        position: relative;
        padding-right: 180px;
    }

    .header-content {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        width: 100%;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: #344767;
        margin: 0;
        margin-bottom: 1rem;
    }

    .filter-section {
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 3px 8px rgba(149, 157, 165, 0.12);
        padding: 1rem;
        width: 100%;
    }

    .filter-title {
        font-size: 1rem;
        font-weight: 600;
        color: #344767;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .filter-title i {
        color: #5e72e4;
    }

    .filter-body {
        display: flex;
        flex-direction: row;
        gap: 2rem;
        align-items: flex-end;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

    .filter-label {
        display: block;
        margin-bottom: 0.25rem;
        font-weight: 500;
        font-size: 0.875rem;
        color: #344767;
    }

    .filter-input {
        width: 100%;
        padding: 0.375rem 0.5rem;
        border: 1px solid #d9e2ef;
        border-radius: 5px;
        background-color: #f8f9fa;
        transition: all 0.2s ease;
        font-size: 0.875rem;
    }

    .range-container {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .range-value {
        min-width: 40px;
        text-align: center;
        background-color: #5e72e4;
        color: white;
        padding: 0.15rem 0.35rem;
        border-radius: 4px;
        font-weight: 500;
        font-size: 0.75rem;
    }

    @media (max-width: 992px) {
        .filter-body {
            flex-direction: column;
            gap: 1rem;
        }

        .filter-group {
            width: 100%;
        }
    }

    .discount-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: #ff4757;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.9rem;
        z-index: 1;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.05);
        }
        100% {
            transform: scale(1);
        }
    }

    .map-view-btn {
        position: absolute;
        right: 20px;
        top: 20px;
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
        transition: background-color 0.3s;
    }
    
    .map-view-btn:hover {
        background-color: #45a049;
        color: white;
        text-decoration: none;
    }
    
    .map-view-btn i {
        font-size: 1.1em;
    }
</style>

<div class="page-header">
    <div class="header-content">
        <h2 class="page-title">Stations disponibles</h2>
        <a href="{{ path('app_stations_map') }}" class="btn btn-primary map-view-btn">
            <i class="fas fa-map-marked-alt"></i>
            Voir sur la carte
        </a>
        <div class="filter-section">
            <div class="filter-title">
                <i class="fas fa-filter"></i>
                <span>Filtrer les stations</span>
            </div>
            
            <div class="filter-body">
                <div class="filter-group">
                    <label for="filter-name" class="filter-label">Nom de la station</label>
                    <input type="text" id="filter-name" class="filter-input" placeholder="Rechercher par nom..." oninput="applyFilters()">
                </div>
                
                <div class="filter-group">
                    <label for="filter-price" class="filter-label">Prix maximum (€/heure)</label>
                    <div class="range-container">
                        <input type="range" id="filter-price" class="filter-input" min="0" max="20" step="1" value="20" oninput="updatePriceValue(this.value); applyFilters()">
                        <div class="range-value" id="price-value">20€</div>
                    </div>
                </div>
                
                <div class="filter-group">
                    <label for="filter-bikes" class="filter-label">Nombre minimum de vélos</label>
                    <div class="range-container">
                        <input type="range" id="filter-bikes" class="filter-input" min="0" max="20" step="1" value="0" oninput="updateBikesValue(this.value); applyFilters()">
                        <div class="range-value" id="bikes-value">0</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="station-container">
    {% for station in stations %}
        <div class="station-card">
            <div class="current-rating">
                <i class="fas fa-star"></i>
                <span>{{ station.rating|number_format(1) }}/5</span>
                <small>({{ station.numberRaters }} avis)</small>
            </div>
            {% if station.nombreVelo > 50 %}
                <div class="discount-badge">-20%</div>
            {% endif %}
            <img src="{% if station.typeVelo == 'velo electrique' %}
                        {{ asset('images/vel electrique.jpeg') }}
                    {% elseif station.typeVelo == 'velo urbain' %}
                        {{ asset('images/vel urbain.jpeg') }}
                    {% elseif station.typeVelo == 'velo de route' %}
                        {{ asset('images/vel de route.jpeg') }}
                    {% else %}
                        {{ asset('images/vel de route.jpeg') }}
                    {% endif %}" alt="Image de la station" class="station-image">
            <div class="station-content">
                <h3 class="station-title">{{ station.nom }}</h3>
                <div class="station-detail">
                    <i class="fas fa-map-marker-alt"></i>
                    <span>Localisation</span>
                </div>
                <div class="station-detail">
                    <i class="fas fa-money-bill-wave"></i>
                    <span>
                        {% if station.nombreVelo > 50 %}
                            <span style="text-decoration: line-through; color: #67748e; margin-right: 5px;">
                                {{ station.prixHeure ?? 5 }}€/heure
                            </span>
                            <span style="color: #ff4757; font-weight: 600;">
                                {{ ((station.prixHeure ?? 5) * 0.8)|number_format(2) }}€/heure
                            </span>
                        {% else %}
                            {{ station.prixHeure ?? 5 }}€/heure
                        {% endif %}
                        par vélo
                    </span>
                </div>
                <div class="station-rating">
                    <div class="rating-stars" data-station-id="{{ station.idS }}">
                        <i class="fas fa-star" onclick="rateStation(this, 1)"></i>
                        <i class="fas fa-star" onclick="rateStation(this, 2)"></i>
                        <i class="fas fa-star" onclick="rateStation(this, 3)"></i>
                        <i class="fas fa-star" onclick="rateStation(this, 4)"></i>
                        <i class="fas fa-star" onclick="rateStation(this, 5)"></i>
                    </div>
                </div>
            </div>
            <div class="station-footer">
                <div class="station-velos">
                    <i class="fas fa-bicycle"></i>
                    <span>{{ station.nombreVelo }} vélos disponibles</span>
                </div>
                <a href="{{ path('app_reservation_transport_new_reservation', {'id': station.idS}) }}" class="btn-reserve">
                    <i class="fas fa-calendar-check"></i>
                    Réserver
                </a>
            </div>
        </div>
    {% endfor %}
</div>

{# Ajout de la box vidéo en bas à droite #}
<div id="video-tutorial-box" style="position: fixed; bottom: 20px; right: 20px; width: 300px; background: white; border-radius: 10px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 1000; overflow: hidden;">
    <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px 12px; background: #f0f4f8; border-bottom: 1px solid #e0e0e0;">
        <span style="font-weight: bold; color: #344767;">Comment réserver un vélo</span>
        <div>
            <button id="minimize-video" style="background: none; border: none; cursor: pointer; margin-right: 5px; font-size: 16px;">
                <i class="fas fa-minus"></i>
            </button>
            <button id="close-video" style="background: none; border: none; cursor: pointer; font-size: 16px;">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
    <div id="video-container" style="padding: 0;">
        <video id="tutorial-video" style="width: 100%; display: block;" autoplay muted loop>
            <source src="{{ asset('assets/video/airmess_lib_velo.mp4') }}" type="video/mp4">
            Votre navigateur ne prend pas en charge les vidéos HTML5.
        </video>
    </div>
    <div style="padding: 10px; text-align: center;">
        <button id="toggle-play" class="btn btn-sm btn-primary">
            <i class="fas fa-pause"></i> Pause
        </button>
        <button id="toggle-mute" class="btn btn-sm btn-secondary">
            <i class="fas fa-volume-mute"></i> Activer le son
        </button>
    </div>
</div>

<script>
    function rateStation(star, rating) {
        // Get station ID from parent container
        const stationId = star.parentElement.dataset.stationId;
        
        // Show confirmation dialog
        if (confirm(`Êtes-vous sûr de vouloir donner une note de ${rating} étoiles à cette station ?`)) {
            // Send rating to backend
            fetch(`/station/rate/${stationId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                },
                body: JSON.stringify({ rating: rating })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the display
                    const stars = star.parentElement.querySelectorAll('i');
                    stars.forEach((s, index) => {
                        if (index < rating) {
                            s.classList.add('filled');
                        } else {
                            s.classList.remove('filled');
                        }
                    });

                    // Update the current rating display
                    const cardElement = star.closest('.station-card');
                    const ratingDisplay = cardElement.querySelector('.current-rating span');
                    const ratersDisplay = cardElement.querySelector('.current-rating small');
                    
                    ratingDisplay.textContent = `${data.newRating.toFixed(1)}/5`;
                    ratersDisplay.textContent = `(${data.numberRaters} avis)`;
                } else {
                    alert('Une erreur est survenue lors de la notation. Veuillez réessayer.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Une erreur est survenue lors de la notation. Veuillez réessayer.');
            });
        }
    }
    
    function updatePriceValue(value) {
        document.getElementById('price-value').textContent = value + '€';
    }
    
    function updateBikesValue(value) {
        document.getElementById('bikes-value').textContent = value;
    }
    
    function applyFilters() {
        const nameFilter = document.getElementById('filter-name').value.toLowerCase();
        const maxPrice = parseFloat(document.getElementById('filter-price').value);
        const minBikes = parseInt(document.getElementById('filter-bikes').value);
        
        const stationCards = document.querySelectorAll('.station-card');
        
        stationCards.forEach(card => {
            // Get station data from card
            const stationName = card.querySelector('.station-title').textContent.toLowerCase();
            
            // Parse price (remove €/heure par vélo)
            const priceText = card.querySelector('.station-detail:nth-child(3) span').textContent;
            const stationPrice = parseFloat(priceText.split('€')[0]);
            
            // Parse bikes available
            const bikesText = card.querySelector('.station-velos span').textContent;
            const stationBikes = parseInt(bikesText.split(' ')[0]);
            
            // Apply filters
            const nameMatch = stationName.includes(nameFilter);
            const priceMatch = stationPrice <= maxPrice;
            const bikesMatch = stationBikes >= minBikes;
            
            // Show or hide based on filters
            if (nameMatch && priceMatch && bikesMatch) {
                card.style.display = 'flex';
            } else {
                card.style.display = 'none';
            }
        });
        
        // Check if any stations are visible
        const visibleStations = document.querySelectorAll('.station-card[style="display: flex"]');
        const noResultsMessage = document.getElementById('no-results-message');
        
        if (visibleStations.length === 0) {
            // If no results message doesn't exist, create it
            if (!noResultsMessage) {
                const container = document.querySelector('.station-container');
                const message = document.createElement('div');
                message.id = 'no-results-message';
                message.style.width = '100%';
                message.style.textAlign = 'center';
                message.style.padding = '2rem';
                message.style.color = '#67748e';
                message.style.fontSize = '1.1rem';
                message.innerHTML = 'Aucune station ne correspond à vos critères de recherche. <br>Veuillez essayer avec des filtres différents.';
                container.appendChild(message);
            } else {
                noResultsMessage.style.display = 'block';
            }
        } else if (noResultsMessage) {
            // Hide no results message if it exists
            noResultsMessage.style.display = 'none';
        }
    }
    
    // Initialize filters
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize price range display
        updatePriceValue(document.getElementById('filter-price').value);
        updateBikesValue(document.getElementById('filter-bikes').value);
        
        // Add event listener for name filter input
        document.getElementById('filter-name').addEventListener('input', function() {
            applyFilters();
        });
        
        // Add event listeners for range inputs
        document.getElementById('filter-price').addEventListener('input', function() {
            applyFilters();
        });
        
        document.getElementById('filter-bikes').addEventListener('input', function() {
            applyFilters();
        });
    });

    document.addEventListener('DOMContentLoaded', function() {
        console.log("Initialisation de la vidéo");
        
        // Éléments vidéo
        const videoBox = document.getElementById('video-tutorial-box');
        const video = document.getElementById('tutorial-video');
        const togglePlayBtn = document.getElementById('toggle-play');
        const toggleMuteBtn = document.getElementById('toggle-mute');
        const minimizeBtn = document.getElementById('minimize-video');
        const closeBtn = document.getElementById('close-video');
        const videoContainer = document.getElementById('video-container');
        
        if (!video) {
            console.error("Élément vidéo non trouvé");
            return;
        }
        
        console.log("Vidéo trouvée:", video);
        console.log("Source vidéo:", video.querySelector('source')?.src);
        
        // Vérifier si la vidéo peut être lue
        video.addEventListener('error', function(e) {
            console.error("Erreur de chargement de la vidéo:", e);
            const errorDiv = document.createElement('div');
            errorDiv.style.padding = '20px';
            errorDiv.style.color = 'red';
            errorDiv.style.textAlign = 'center';
            errorDiv.innerHTML = "Impossible de charger la vidéo. Veuillez vérifier que le fichier existe.";
            videoContainer.innerHTML = '';
            videoContainer.appendChild(errorDiv);
        });
        
        // Vérifier si la vidéo est chargée correctement
        video.addEventListener('loadeddata', function() {
            console.log("Vidéo chargée avec succès");
        });
        
        let minimized = false;
        
        // Gestion lecture/pause
        togglePlayBtn.addEventListener('click', function() {
            if (video.paused) {
                video.play();
                togglePlayBtn.innerHTML = '<i class="fas fa-pause"></i> Pause';
                console.log("Lecture de la vidéo");
            } else {
                video.pause();
                togglePlayBtn.innerHTML = '<i class="fas fa-play"></i> Lecture';
                console.log("Pause de la vidéo");
            }
        });
        
        // Gestion son
        toggleMuteBtn.addEventListener('click', function() {
            video.muted = !video.muted;
            if (video.muted) {
                toggleMuteBtn.innerHTML = '<i class="fas fa-volume-mute"></i> Activer le son';
                console.log("Son désactivé");
            } else {
                toggleMuteBtn.innerHTML = '<i class="fas fa-volume-up"></i> Couper le son';
                console.log("Son activé");
            }
        });
        
        // Gestion redémarrage automatique
        video.addEventListener('ended', function() {
            console.log("Vidéo terminée, redémarrage");
            video.currentTime = 0;
            video.play();
        });
        
        // Minimiser/Agrandir
        minimizeBtn.addEventListener('click', function() {
            if (minimized) {
                videoContainer.style.display = 'block';
                minimizeBtn.innerHTML = '<i class="fas fa-minus"></i>';
                minimized = false;
                console.log("Vidéo agrandie");
            } else {
                videoContainer.style.display = 'none';
                minimizeBtn.innerHTML = '<i class="fas fa-plus"></i>';
                minimized = true;
                console.log("Vidéo minimisée");
            }
        });
        
        // Fermer
        closeBtn.addEventListener('click', function() {
            videoBox.style.display = 'none';
            // Stocker la préférence utilisateur dans localStorage
            localStorage.setItem('videoTutorialClosed', 'true');
            console.log("Vidéo fermée");
        });
        
        // Vérifier si l'utilisateur a déjà fermé la vidéo
        if (localStorage.getItem('videoTutorialClosed') === 'true') {
            videoBox.style.display = 'none';
            console.log("Vidéo cachée (préférence utilisateur)");
        }
    });
</script>
{% endblock %}